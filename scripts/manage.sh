#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º Emlak

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

PROJECT_DIR="~/apps/emlak"

function show_help() {
    echo -e "${BLUE}üîß –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º Emlak${NC}"
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage.sh <–∫–æ–º–∞–Ω–¥–∞>${NC}"
    echo ""
    echo -e "${GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "  ${YELLOW}status${NC}     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${YELLOW}logs${NC}       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo -e "  ${YELLOW}restart${NC}    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "  ${YELLOW}stop${NC}       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "  ${YELLOW}start${NC}      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo -e "  ${YELLOW}update${NC}     - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ Git –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo -e "  ${YELLOW}clean${NC}      - –û—á–∏—Å—Ç–∏—Ç—å Docker –∫–µ—à –∏ –æ–±—Ä–∞–∑—ã"
    echo -e "  ${YELLOW}backup${NC}     - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo -e "  ${YELLOW}monitor${NC}    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo -e "  ${YELLOW}help${NC}       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${BLUE}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo -e "  ./manage.sh status"
    echo -e "  ./manage.sh logs"
    echo -e "  ./manage.sh restart"
}

function check_project_dir() {
    if [ ! -d "$PROJECT_DIR" ]; then
        echo -e "${RED}‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR${NC}"
        exit 1
    fi
    cd "$PROJECT_DIR"
}

function show_status() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    docker-compose ps
    echo ""
    echo -e "${BLUE}üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
    docker system df
    echo ""
    echo -e "${BLUE}üîÑ Uptime —Å–∏—Å—Ç–µ–º—ã:${NC}"
    uptime
}

function show_logs() {
    echo -e "${BLUE}üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    echo -e "${YELLOW}=== PostgreSQL ===${NC}"
    docker-compose logs --tail=10 postgres
    echo ""
    echo -e "${YELLOW}=== Bot ===${NC}"
    docker-compose logs --tail=10 bot
    echo ""
    echo -e "${YELLOW}=== Parser ===${NC}"
    docker-compose logs --tail=10 parser
}

function restart_services() {
    echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    docker-compose restart
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã${NC}"
}

function stop_services() {
    echo -e "${BLUE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

function start_services() {
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    docker-compose up -d
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
}

function update_project() {
    echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if [ -f ".env" ]; then
        cp .env .env.backup
        echo -e "${GREEN}‚úÖ .env —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω${NC}"
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
    git pull origin master
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if [ -f ".env.backup" ]; then
        cp .env.backup .env
        rm .env.backup
        echo -e "${GREEN}‚úÖ .env —Ñ–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    docker-compose down
    docker-compose up --build -d
    
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω${NC}"
}

function clean_docker() {
    echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ Docker...${NC}"
    docker-compose down
    docker system prune -f
    docker volume prune -f
    echo -e "${GREEN}‚úÖ Docker –æ—á–∏—â–µ–Ω${NC}"
}

function backup_database() {
    echo -e "${BLUE}üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...${NC}"
    
    BACKUP_DIR="backups"
    mkdir -p "$BACKUP_DIR"
    
    BACKUP_FILE="$BACKUP_DIR/emlak_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    docker-compose exec postgres pg_dump -U emlak emlak > "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_FILE${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏${NC}"
    fi
}

function monitor_services() {
    echo -e "${BLUE}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...${NC}"
    
    while true; do
        clear
        echo -e "${BLUE}=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Emlak === $(date)${NC}"
        echo ""
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        echo -e "${YELLOW}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
        docker-compose ps
        echo ""
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        echo -e "${YELLOW}üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:${NC}"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
        echo ""
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        echo -e "${YELLOW}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:${NC}"
        docker-compose logs --tail=3 2>/dev/null | tail -10
        
        sleep 5
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    "status")
        check_project_dir
        show_status
        ;;
    "logs")
        check_project_dir
        show_logs
        ;;
    "restart")
        check_project_dir
        restart_services
        ;;
    "stop")
        check_project_dir
        stop_services
        ;;
    "start")
        check_project_dir
        start_services
        ;;
    "update")
        check_project_dir
        update_project
        ;;
    "clean")
        check_project_dir
        clean_docker
        ;;
    "backup")
        check_project_dir
        backup_database
        ;;
    "monitor")
        check_project_dir
        monitor_services
        ;;
    "help"|""|*)
        show_help
        ;;
esac 