import { spawn } from 'child_process';
import chalk from 'chalk';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...'));

// –ü—Ä–æ—Ü–µ—Å—Å—ã
let botProcess = null;
let parserProcess = null;
const runningProcesses = [];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log(chalk.yellow('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...'));
  await shutdown();
});

process.on('SIGTERM', async () => {
  console.log(chalk.yellow('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...'));
  await shutdown();
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async function shutdown() {
  console.log(chalk.blue('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...'));
  
  for (const proc of runningProcesses) {
    if (proc && !proc.killed) {
      proc.kill();
    }
  }
  
  console.log(chalk.green('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã'));
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
function startBot() {
  console.log(chalk.cyan('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...'));
  
  const botPath = path.join(__dirname, 'bot');
  botProcess = spawn('node', ['index.js'], {
    cwd: botPath,
    stdio: ['inherit', 'pipe', 'pipe']
  });
  
  runningProcesses.push(botProcess);
  
  botProcess.stdout.on('data', (data) => {
    const output = data.toString().trim();
    if (output) {
      console.log(chalk.blue('ü§ñ [BOT]'), output);
    }
  });
  
  botProcess.stderr.on('data', (data) => {
    const output = data.toString().trim();
    if (output) {
      console.log(chalk.red('ü§ñ [BOT ERROR]'), output);
    }
  });
  
  botProcess.on('close', (code) => {
    if (code !== 0) {
      console.log(chalk.red(`‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`));
      console.log(chalk.blue('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...'));
      setTimeout(startBot, 5000);
    }
  });
  
  botProcess.on('error', (error) => {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:'), error.message);
    setTimeout(startBot, 5000);
  });
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤
function startParsers() {
  console.log(chalk.cyan('üîç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤...'));
  
  const parserPath = path.join(__dirname, 'parser');
  parserProcess = spawn('node', ['--loader', './loader.mjs', 'start-production.js'], {
    cwd: parserPath,
    stdio: ['inherit', 'pipe', 'pipe']
  });
  
  runningProcesses.push(parserProcess);
  
  parserProcess.stdout.on('data', (data) => {
    const output = data.toString().trim();
    if (output) {
      console.log(chalk.green('üîç [PARSER]'), output);
    }
  });
  
  parserProcess.stderr.on('data', (data) => {
    const output = data.toString().trim();
    if (output && !output.includes('DeprecationWarning')) {
      console.log(chalk.yellow('üîç [PARSER WARN]'), output);
    }
  });
  
  parserProcess.on('close', (code) => {
    if (code !== 0) {
      console.log(chalk.red(`‚ùå –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`));
      console.log(chalk.blue('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...'));
      setTimeout(startParsers, 10000);
    }
  });
  
  parserProcess.on('error', (error) => {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:'), error.message);
    setTimeout(startParsers, 10000);
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function main() {
  try {
    console.log(chalk.blue('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
    startBot();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
    setTimeout(() => {
      startParsers();
    }, 2000);
    
    console.log(chalk.green('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!'));
    console.log(chalk.cyan('üìä –°—Ç–∞—Ç—É—Å:'));
    console.log('   ü§ñ Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω');
    console.log('   üîç –ü–∞—Ä—Å–µ—Ä—ã: –ó–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)');
    console.log('   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL');
    console.log('');
    console.log(chalk.yellow('‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'), error.message);
    await shutdown();
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error); 