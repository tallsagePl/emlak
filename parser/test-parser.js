import { HepsiemlakParser, EmlakjetParser } from './parsers/index.js';
import { CONSTANTS } from './utils/index.js';
import fs from 'fs';
import path from 'path';

console.log(CONSTANTS.CHALK.blue('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'));

// –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const parserName = process.argv[2] || 'hepsiemlak';
const limit = parseInt(process.argv[3]) || 3;

console.log(CONSTANTS.CHALK.cyan(`üìã –ü–∞—Ä—Å–µ—Ä: ${parserName}`));
console.log(CONSTANTS.CHALK.cyan(`üìä –õ–∏–º–∏—Ç: ${limit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));

async function testParser() {
  try {
    let results = [];
    
    if (parserName === 'hepsiemlak') {
      console.log(CONSTANTS.CHALK.yellow('\nüè† –ó–∞–ø—É—Å–∫ HepsEmlak –ø–∞—Ä—Å–µ—Ä–∞...'));
      results = await HepsiemlakParser.run(limit);
    } else if (parserName === 'emlakjet') {
      console.log(CONSTANTS.CHALK.yellow('\nüè° –ó–∞–ø—É—Å–∫ EmlakJet –ø–∞—Ä—Å–µ—Ä–∞...'));
      results = await EmlakjetParser.run(limit);
    } else {
      console.error(CONSTANTS.CHALK.red('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: hepsiemlak –∏–ª–∏ emlakjet'));
      process.exit(1);
    }
    
    console.log(CONSTANTS.CHALK.green(`\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    const outputDir = './output';
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `${parserName}_${timestamp}.json`;
    const filepath = path.join(outputDir, filename);
    
    fs.writeFileSync(filepath, JSON.stringify(results, null, 2), 'utf8');
    
    console.log(CONSTANTS.CHALK.cyan(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filepath}`));
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(CONSTANTS.CHALK.blue('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:'));
    console.log(`–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${results.length}`);
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${results.filter(r => r.success).length}`);
    console.log(`–° –æ—à–∏–±–∫–∞–º–∏: ${results.filter(r => !r.success).length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    if (results.length > 0) {
      console.log(CONSTANTS.CHALK.yellow('\nüîç –ü–†–ò–ú–ï–† –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:'));
      console.log(JSON.stringify(results[0], null, 2));
    }
    
  } catch (error) {
    console.error(CONSTANTS.CHALK.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
    console.error(error.stack);
  }
}

testParser(); 