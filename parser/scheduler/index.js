import cron from 'node-cron';
import chalk from 'chalk';
import { PARSERS } from '../config/parsers.js';
import database from '../adapters/database.js';

export class ProductionScheduler {
  constructor() {
    this.db = database;
    this.isRunning = false;
    this.currentJob = null;
    this.stats = {
      totalRuns: 0,
      lastRunTime: null,
      lastRunResults: {},
      errors: []
    };

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
    this.schedulers = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
    this.parsers = Object.entries(PARSERS).reduce((acc, [key, parser]) => {
      acc[key] = {
        name: parser.name,
        runner: parser.runner,
        schedule: parser.schedule,
        enabled: true,
        lastRun: null,
        totalRuns: 0,
        isRunning: false
      };
      return acc;
    }, {});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', this.shutdown.bind(this));
    process.on('SIGTERM', this.shutdown.bind(this));
  }

  async init() {
    try {
      console.log(chalk.blue('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...'));
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
      await this.db.connect();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–∞—Ä—Å–µ—Ä–∞–º
      await this.showInitialStats();
      
      console.log(chalk.green('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'));
      
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:'), error.message);
      throw error;
    }
  }

  async showInitialStats() {
    console.log(chalk.cyan('\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:'));
    
    for (const [parserName, config] of Object.entries(this.parsers)) {
      if (config.enabled) {
        const stats = await this.db.getSiteStats(parserName);
        console.log(chalk.white(`\nüîπ ${config.name}:`));
        console.log(`   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats?.saved_listings || 0}`);
        console.log(`   üîó –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ URL: ${stats?.processed_urls_count || 0}`);
        console.log(`   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: ${stats?.last_parsed ? new Date(stats.last_parsed).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
      }
    }
    console.log();
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
  start() {
    console.log(chalk.blue('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...'));
    
    for (const [parserName, config] of Object.entries(this.parsers)) {
      if (config.enabled) {
        this.scheduleParser(parserName, config);
      }
    }
    
    this.isRunning = true;
    console.log(chalk.green('‚úÖ –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    this.showSchedule();
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
  scheduleParser(parserName, config) {
    const task = cron.schedule(config.schedule, async () => {
      await this.runParser(parserName, config);
    }, {
      scheduled: false,
      timezone: 'Europe/Moscow'
    });

    this.schedulers.set(parserName, task);
    task.start();
    
    console.log(chalk.cyan(`üìÖ ${config.name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: ${config.schedule}`));
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
  async runParser(parserName, config) {
    if (this.currentJob) {
      console.log(chalk.yellow(`‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä ${parserName} –ø—Ä–æ–ø—É—â–µ–Ω - —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${this.currentJob}`));
      return;
    }

    if (config.isRunning) {
      console.log(chalk.yellow(`‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä ${parserName} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`));
      return;
    }

    this.currentJob = parserName;
    config.isRunning = true;
    const startTime = Date.now();
    
    try {
      console.log(chalk.blue(`\nüöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê: ${config.name}`));
      console.log(chalk.gray(`–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
      const results = await config.runner();
      
      if (results && results.length > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î (—ç—Ç–æ —Ç–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const saveResult = await this.db.saveParsingResults(parserName, results);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        config.lastRun = new Date();
        config.totalRuns++;
        this.stats.totalRuns++;
        this.stats.lastRunTime = new Date();
        this.stats.lastRunResults[parserName] = {
          timestamp: new Date(),
          totalFound: results.length,
          saved: saveResult.savedCount,
          duration: Date.now() - startTime
        };
        
        console.log(chalk.green(`‚úÖ ${config.name} –∑–∞–≤–µ—Ä—à–µ–Ω:`));
        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ: ${results.length}`);
        console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${saveResult.savedCount}`);
        console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è: ${Math.round((Date.now() - startTime) / 1000)}—Å`);
        
      } else {
        console.log(chalk.yellow(`‚ö†Ô∏è ${config.name}: –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`));
      }
      
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${config.name}:`), error.message);
      
      this.stats.errors.push({
        timestamp: new Date(),
        parser: parserName,
        error: error.message
      });
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –æ—à–∏–±–æ–∫
      if (this.stats.errors.length > 100) {
        this.stats.errors = this.stats.errors.slice(-50);
      }
      
    } finally {
      this.currentJob = null;
      config.isRunning = false;
      console.log(chalk.gray(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`));
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  showSchedule() {
    console.log(chalk.cyan('\nüìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–ê–ü–£–°–ö–û–í:'));
    
    for (const [parserName, config] of Object.entries(this.parsers)) {
      if (config.enabled) {
        const nextRun = this.getNextRunTime(config.schedule);
        console.log(chalk.white(`üîπ ${config.name}:`));
        console.log(`   ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${config.schedule}`);
        console.log(`   ‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${nextRun}`);
        console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: ${config.totalRuns}`);
      }
    }
    console.log();
  }

  // –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
  getNextRunTime(cronExpression) {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è –¥–ª—è "0 */4 * * *"
      const now = new Date();
      const nextHour = Math.ceil(now.getHours() / 4) * 4;
      const nextRun = new Date(now);
      
      if (nextHour >= 24) {
        nextRun.setDate(nextRun.getDate() + 1);
        nextRun.setHours(0, 0, 0, 0);
      } else {
        nextRun.setHours(nextHour, 0, 0, 0);
      }
      
      return nextRun.toLocaleString('ru-RU');
    } catch {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    return {
      isRunning: this.isRunning,
      currentJob: this.currentJob,
      totalRuns: this.stats.totalRuns,
      lastRunTime: this.stats.lastRunTime,
      lastRunResults: this.stats.lastRunResults,
      recentErrors: this.stats.errors.slice(-10),
      parsers: Object.fromEntries(
        Object.entries(this.parsers).map(([name, config]) => [
          name, 
          {
            name: config.name,
            enabled: config.enabled,
            schedule: config.schedule,
            lastRun: config.lastRun,
            totalRuns: config.totalRuns
          }
        ])
      )
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä
  async forceRun(parserName) {
    const config = this.parsers[parserName];
    if (!config) {
      throw new Error(`–ü–∞—Ä—Å–µ—Ä ${parserName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    console.log(chalk.blue(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: ${config.name}`));
    await this.runParser(parserName, config);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  stop() {
    console.log(chalk.blue('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...'));
    
    for (const [parserName, task] of this.schedulers) {
      task.stop();
      console.log(chalk.yellow(`üìµ ${parserName} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`));
    }
    
    this.isRunning = false;
    console.log(chalk.red('üî¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
  }

  // Graceful shutdown
  async shutdown() {
    console.log(chalk.blue('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...'));
    
    this.stop();
    await this.db.close();
    
    console.log(chalk.green('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'));
  }
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
// (async () => {
//   console.log(chalk.blue('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è EmlakJet...'));
//   const scheduler = new ProductionScheduler();
//   try {
//     await scheduler.init();
//     await scheduler.forceRun('emlakjet');
//     console.log(chalk.green('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ'));
//   } catch (error) {
//     console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:'), error.message);
//   } finally {
//     await scheduler.shutdown();
//     process.exit(0);
//   }
// })(); 