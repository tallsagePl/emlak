import { CONSTANTS } from '../utils/index.js';
import database from '../../database/index.js';

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API –ø–∞—Ä—Å–µ—Ä–∞
class ParserDatabaseAdapter {
  constructor() {
    this.database = database;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  async connect() {
    try {
      await this.database.init();
      console.log(CONSTANTS.CHALK.green('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'));
    } catch (error) {
      console.error(CONSTANTS.CHALK.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:'), error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL –¥–ª—è —Å–∞–π—Ç–∞
  async getProcessedUrls(siteName) {
    try {
      return await this.database.getProcessedUrls(siteName);
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è ${siteName}:`), error.message);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ URL
  async isUrlProcessed(url) {
    try {
      return await this.database.isUrlProcessed(url);
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL ${url}:`), error.message);
      return false;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  async saveParsingResult(siteName, data) {
    try {
      const listingData = {
        site_name: siteName,
        listing_id: data.listingId || data.specifications?.['–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è'] || null,
        url: data.url,
        data: data,
        price_numeric: data.priceFromAPI || null,
        coordinates: data.mapLocation ? `(${data.mapLocation.lon},${data.mapLocation.lat})` : null
      };

      const result = await this.database.saveParsedListing(listingData);
      return result.id;
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`), error.message);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞
  async clearSiteData(siteName) {
    try {
      const count = await this.database.clearSiteData(siteName);
      console.log(CONSTANTS.CHALK.blue(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${siteName}`));
      return count;
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${siteName}:`), error.message);
      throw error;
    }
  }

  // –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
  async saveParsingResults(siteName, results) {
    try {
      console.log(CONSTANTS.CHALK.cyan(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è ${siteName}...`));

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const newListings = results
        .filter(result => result.success)
        .map(result => {

          return {
            site_name: siteName,
            listing_id: result.listingId || result.specifications?.['–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è'] || null,
            url: result.url,
            data: result,
            price_numeric: result.priceFromAPI || this.extractPrice(result.specifications?.['–¶–µ–Ω–∞']) || null,
            coordinates: result.mapLocation ? `(${result.mapLocation.lon},${result.mapLocation.lat})` : null
          };
        });

      // –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const syncResult = await this.smartSync(siteName, newListings);

      console.log(CONSTANTS.CHALK.green(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${siteName}:`));
      console.log(CONSTANTS.CHALK.blue(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${syncResult.added}`));
      console.log(CONSTANTS.CHALK.yellow(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${syncResult.updated}`));
      console.log(CONSTANTS.CHALK.red(`  ‚ûñ –£–¥–∞–ª–µ–Ω–æ: ${syncResult.deleted}`));
      console.log(CONSTANTS.CHALK.gray(`  ‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${syncResult.unchanged}`));

      return {
        savedCount: syncResult.added + syncResult.updated,
        totalCount: results.length,
        ...syncResult
      };
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`), error.message);
      throw error;
    }
  }

  // –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  async smartSync(siteName, newListings) {
    const stats = {
      added: 0,
      updated: 0,
      deleted: 0,
      unchanged: 0
    };

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
      const existingQuery = `
        SELECT id, url, listing_id, data, price_numeric, coordinates, created_at, updated_at
        FROM parsed_listings 
        WHERE site_name = $1
      `;
      const existingResult = await this.database.query(existingQuery, [siteName]);
      const existingListings = existingResult.rows;

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const existingByUrl = new Map();
      const existingByListingId = new Map();
      
      existingListings.forEach(listing => {
        if (listing.url) {
          existingByUrl.set(listing.url, listing);
        }
        if (listing.listing_id) {
          existingByListingId.set(listing.listing_id, listing);
        }
      });

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      const newByUrl = new Map();
      const newByListingId = new Map();
      
      newListings.forEach(listing => {
        if (listing.url) {
          newByUrl.set(listing.url, listing);
        }
        if (listing.listing_id) {
          newByListingId.set(listing.listing_id, listing);
        }
      });

      // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
      for (const newListing of newListings) {
        let existingListing = null;
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ URL –∏–ª–∏ listing_id
        if (newListing.url && existingByUrl.has(newListing.url)) {
          existingListing = existingByUrl.get(newListing.url);
        } else if (newListing.listing_id && existingByListingId.has(newListing.listing_id)) {
          existingListing = existingByListingId.get(newListing.listing_id);
        }

        if (existingListing) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
          if (this.hasDataChanged(existingListing, newListing)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            await this.updateListing(existingListing.id, newListing);
            stats.updated++;
            console.log(CONSTANTS.CHALK.yellow(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${newListing.url}`));
          } else {
            stats.unchanged++;
          }
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          await this.addListing(newListing);
          stats.added++;
          console.log(CONSTANTS.CHALK.green(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${newListing.url}`));
        }
      }

      // 3. –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ (–∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ—Ç –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      for (const existingListing of existingListings) {
        let foundInNew = false;
        
        // –ò—â–µ–º –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ URL –∏–ª–∏ listing_id
        if (existingListing.url && newByUrl.has(existingListing.url)) {
          foundInNew = true;
        } else if (existingListing.listing_id && newByListingId.has(existingListing.listing_id)) {
          foundInNew = true;
        }

        if (!foundInNew) {
          // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
          await this.deleteListing(existingListing.id);
          stats.deleted++;
          console.log(CONSTANTS.CHALK.red(`‚ûñ –£–¥–∞–ª–µ–Ω–æ: ${existingListing.url}`));
        }
      }

      return stats;
    } catch (error) {
      console.error(CONSTANTS.CHALK.red('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:'), error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  hasDataChanged(existingListing, newListing) {
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    const existingData = existingListing.data;
    const newData = newListing.data;

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—É
    if (existingListing.price_numeric !== newListing.price_numeric) {
      return true;
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const keyFields = [
      '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–º¬≤ (–±—Ä—É—Ç—Ç–æ)', '–º¬≤ (–Ω–µ—Ç—Ç–æ)', 
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π', '–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç', '–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–æ'
    ];

    for (const field of keyFields) {
      const existingValue = existingData.specifications?.[field];
      const newValue = newData.specifications?.[field];
      
      if (existingValue !== newValue) {
        return true;
      }
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const existingImages = existingData.images?.length || 0;
    const newImages = newData.images?.length || 0;
    
    if (existingImages !== newImages) {
      return true;
    }

    return false;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  async addListing(listing) {
    const query = `
      INSERT INTO parsed_listings (site_name, listing_id, url, data, price_numeric, coordinates, created_at, updated_at)
      VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
      RETURNING id
    `;
    
    const values = [
      listing.site_name,
      listing.listing_id,
      listing.url,
      JSON.stringify(listing.data),
      listing.price_numeric,
      listing.coordinates
    ];

    const result = await this.database.query(query, values);
    return result.rows[0].id;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
  async updateListing(id, listing) {
    const query = `
      UPDATE parsed_listings 
      SET data = $1, price_numeric = $2, coordinates = $3, updated_at = NOW()
      WHERE id = $4
    `;
    
    const values = [
      JSON.stringify(listing.data),
      listing.price_numeric,
      listing.coordinates,
      id
    ];

    await this.database.query(query, values);
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
  async deleteListing(id) {
    const query = `DELETE FROM parsed_listings WHERE id = $1`;
    await this.database.query(query, [id]);
  }

  // –ò–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
  extractPrice(priceString) {
    if (!priceString || typeof priceString !== 'string') {
      return null;
    }
    
    const numbers = priceString.replace(/[^\d]/g, '');
    return numbers ? parseInt(numbers) : null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–π—Ç–∞
  async getSiteStats(siteName) {
    try {
      const stats = await this.database.getListingsStats(siteName);
      const siteStat = stats[0] || {};

      return {
        site_name: siteName,
        processed_urls_count: siteStat.processed_urls_count || 0,
        saved_listings: parseInt(siteStat.total_listings) || 0,
        last_parsed: siteStat.last_parsed || null,
        first_parsed: siteStat.first_parsed || null,
        avg_price: parseFloat(siteStat.avg_price) || 0
      };
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${siteName}:`), error.message);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
  async getAllStats() {
    try {
      const stats = await this.database.getAllStats();
      
      return stats.map(stat => ({
          site_name: stat.site_name,
        processed_urls_count: stat.processed_urls_count || 0,
        saved_listings: parseInt(stat.total_listings) || 0,
        last_parsed: stat.last_parsed || null,
        first_parsed: stat.first_parsed || null,
        avg_price: parseFloat(stat.avg_price) || 0
      }));
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`), error.message);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async getSyncStats(siteName, hoursBack = 24) {
    try {
      const query = `
        SELECT 
          COUNT(*) as total_listings,
          COUNT(*) FILTER (WHERE created_at >= NOW() - INTERVAL '${hoursBack} hours') as added_recently,
          COUNT(*) FILTER (WHERE updated_at >= NOW() - INTERVAL '${hoursBack} hours' AND created_at < NOW() - INTERVAL '${hoursBack} hours') as updated_recently,
          MAX(updated_at) as last_sync,
          MIN(created_at) as first_sync,
          AVG(price_numeric) as avg_price,
          COUNT(DISTINCT listing_id) as unique_listings
        FROM parsed_listings 
        WHERE site_name = $1
      `;
      
      const result = await this.database.query(query, [siteName]);
      const row = result.rows[0];

      return {
        site_name: siteName,
        total_listings: parseInt(row.total_listings) || 0,
        added_recently: parseInt(row.added_recently) || 0,
        updated_recently: parseInt(row.updated_recently) || 0,
        last_sync: row.last_sync || null,
        first_sync: row.first_sync || null,
        avg_price: parseFloat(row.avg_price) || 0,
        unique_listings: parseInt(row.unique_listings) || 0
      };
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`), error.message);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  async getRecentChanges(siteName, limit = 10) {
    try {
      const query = `
        SELECT 
          listing_id,
          url,
          data->>'specifications'->>'–ù–∞–∑–≤–∞–Ω–∏–µ' as title,
          price_numeric,
          created_at,
          updated_at,
          CASE 
            WHEN created_at >= NOW() - INTERVAL '1 hour' THEN 'added'
            WHEN updated_at >= NOW() - INTERVAL '1 hour' THEN 'updated'
            ELSE 'existing'
          END as change_type
        FROM parsed_listings 
        WHERE site_name = $1 
        ORDER BY GREATEST(created_at, updated_at) DESC
        LIMIT $2
      `;
      
      const result = await this.database.query(query, [siteName, limit]);
      
      return result.rows.map(row => ({
        listing_id: row.listing_id,
        url: row.url,
        title: row.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        price: row.price_numeric,
        created_at: row.created_at,
        updated_at: row.updated_at,
        change_type: row.change_type
      }));
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:`), error.message);
      return [];
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
  async cleanOldData(siteName, daysToKeep = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      const query = `
        DELETE FROM parsed_listings 
        WHERE site_name = $1 AND created_at < $2
      `;
      
      const result = await this.database.query(query, [siteName, cutoffDate.toISOString()]);
      
      console.log(CONSTANTS.CHALK.blue(`üßπ –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${siteName}`));
      
      return result.rowCount;
    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:`), error.message);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  async close() {
    try {
      await this.database.close();
      console.log(CONSTANTS.CHALK.green('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ'));
    } catch (error) {
      console.error(CONSTANTS.CHALK.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:'), error.message);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
const databaseManager = new ParserDatabaseAdapter();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
export default databaseManager; 