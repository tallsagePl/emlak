import { CONSTANTS } from './CONSTANTS.js';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –≤ —á–∏—Å–ª–æ
 */
export function formatPrice(price) {
    if (!price) return null;
    return parseInt(price.replace(/[^0-9]/g, ''));
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç
 */
export function formatDate(date) {
    if (!date) return null;
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) {
            return null;
        }
        return d.toISOString();
    } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: ${date}`);
        return null;
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
 */
export function cleanText(text) {
    if (!text) return null;
    return text.replace(/\s+/g, ' ').trim();
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
export function extractNumber(text) {
    if (!text) return null;
    const match = text.match(/\d+/);
    return match ? parseInt(match[0]) : null;
}

/**
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ–≥–æ fetch/XHR-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Puppeteer.
 * @param {import('puppeteer').Page} page - –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Puppeteer
 * @param {string} urlPart - —á–∞—Å—Ç—å URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<any>} - –æ—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON)
 */
export async function waitForFetchResponse(page, urlPart) {
    return new Promise((resolve, reject) => {
        // –°–ª—É—à–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        function onResponse(response) {
            const req = response.request();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ XHR –∏–ª–∏ fetch –∏ –Ω—É–∂–Ω—ã–π –Ω–∞–º URL
            if (
                (req.resourceType() === 'xhr' || req.resourceType() === 'fetch') &&
                req.url().includes(urlPart)
            ) {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –ª–∏—à–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã
                page.off('response', onResponse);
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å JSON-–æ—Ç–≤–µ—Ç
                response.json()
                    .then(resolve)
                    .catch(reject);
            }
        }
        page.on('response', onResponse);
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ Cloudflare –∑–∞—â–∏—Ç—ã
 */
export async function handleCloudflare(page) {
    try {
        const title = await page.title();
        if (title.includes('Challenge') || title.includes('Checking') || title.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
            console.log(CONSTANTS.CHALK.yellow('üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Cloudflare, –æ–∂–∏–¥–∞–µ–º...'));
            
            let attempts = 0;
            while (attempts < 12) {
                await new Promise(resolve => setTimeout(resolve, CONSTANTS.DELAYS.CLOUDFLARE_CHECK));
                const newTitle = await page.title();
                if (!newTitle.includes('Challenge') && !newTitle.includes('Checking') && !newTitle.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
                    console.log(CONSTANTS.CHALK.green('‚úÖ Cloudflare –ø—Ä–æ–π–¥–µ–Ω!'));
                    break;
                }
                attempts++;
            }
        }
    } catch (error) {
        console.log(CONSTANTS.CHALK.yellow('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...'));
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
export async function initBrowser() {
    const { browser, page } = await CONSTANTS.PUPPETEER.connect({
        headless: false,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--no-default-browser-check',
            '--disable-default-apps',
            '--disable-popup-blocking',
            '--disable-translate',
            '--disable-background-timer-throttling',
            '--disable-renderer-backgrounding',
            '--disable-backgrounding-occluded-windows',
            '--disable-ipc-flooding-protection'
        ],
        turnstile: true,
        connectOption: {
            defaultViewport: { width: 1366, height: 768 }
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞
    await page.evaluateOnNewDocument(() => {
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined,
        });
    });

    return { browser, page };
}

/**
 * –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export async function collectImages(page) {
    return await page.evaluate(() => {
        const images = [];
        const imgEls = document.querySelectorAll('img');
        imgEls.forEach(img => {
            const src = img.src || img.getAttribute('data-src') || img.getAttribute('data-lazy-src');
            if (src && 
                !src.includes('placeholder') && 
                !src.includes('data:image/svg') &&
                !src.includes('flag_') &&
                !src.includes('icon') &&
                !src.includes('logo') &&
                src.length > 50) {
                images.push(src);
            }
        });
        return images;
    });
} 