import { connect } from 'puppeteer-real-browser';
import fs from 'fs-extra';
import chalk from 'chalk';

class HepsiemlakParser {
  constructor() {
    this.browser = null;
    this.page = null;
    this.realtiesData = [];
    this.detailResults = [];
    this.errors = [];
    
    // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å —Ç—É—Ä–µ—Ü–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    this.translationMap = {
      // –¢–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      'Satƒ±lƒ±k': '–ü—Ä–æ–¥–∞–∂–∞',
      'Kiralƒ±k': '–ê—Ä–µ–Ω–¥–∞',
      
      // –¢–∏–ø—ã –∂–∏–ª—å—è
      'Daire': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
      'Villa': '–í–∏–ª–ª–∞',
      'M√ºstakil Ev': '–û—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–º',
      'Residence': '–†–µ–∑–∏–¥–µ–Ω—Ü–∏—è',
      
      // –§–æ—Ä–º—ã –∂–∏–ª—å—è
      'Dubleks': '–î—É–ø–ª–µ–∫—Å',
      'Tripleks': '–¢—Ä–∏–ø–ª–µ–∫—Å',
      'Normal': '–û–±—ã—á–Ω–∞—è',
      'St√ºdyo': '–°—Ç—É–¥–∏—è',
      '√áatƒ± Dubleks': '–ú–∞–Ω—Å–∞—Ä–¥–Ω—ã–π –¥—É–ø–ª–µ–∫—Å',
      
      // –ü–æ–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      'Banyo Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö',
      'Bulunduƒüu Kat': '–≠—Ç–∞–∂',
      'Kat Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
      'ƒ∞lan No': '–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      'ƒ∞lan Tarihi': '–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      'Son G√ºncelleme': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      'Oda Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
      'Br√ºt / Net M2': '–ë—Ä—É—Ç—Ç–æ/–ù–µ—Ç—Ç–æ –º2',
      'Isƒ±tma': '–û—Ç–æ–ø–ª–µ–Ω–∏–µ',
      'Ya≈üƒ±': '–í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è',
      'Aidat': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
      'Depozito': '–î–µ–ø–æ–∑–∏—Ç',
      'Kredi Uygunluƒüu': '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å',
      'Takas': '–û–±–º–µ–Ω',
      'Tapu Durumu': '–°—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
      'Kimden': '–û—Ç –∫–æ–≥–æ',
      'ƒ∞lan Durumu': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      'Konut Tipi': '–¢–∏–ø –∂–∏–ª—å—è',
      'Konut ≈ûekli': '–§–æ—Ä–º–∞ –∂–∏–ª—å—è'
    };
  }

  async init() {
    console.log(chalk.blue('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...'));
    
    const { browser, page } = await connect({
      headless: false,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--no-default-browser-check',
        '--disable-default-apps',
        '--disable-popup-blocking',
        '--disable-translate',
        '--disable-background-timer-throttling',
        '--disable-renderer-backgrounding',
        '--disable-backgrounding-occluded-windows',
        '--disable-ipc-flooding-protection'
      ],
      turnstile: true,
      connectOption: {
        defaultViewport: { width: 1366, height: 768 }
      }
    });

    this.browser = browser;
    this.page = page;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞
    await this.page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
      });
    });
    
    console.log(chalk.green('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω'));
  }

  translateField(text) {
    if (!text) return text;
    
    for (const [turkish, russian] of Object.entries(this.translationMap)) {
      text = text.replace(new RegExp(turkish, 'gi'), russian);
    }
    
    return text;
  }

  async step1_GetMapData() {
    console.log(chalk.yellow('\nüìç –≠–¢–ê–ü 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ä—Ç—ã'));
    console.log(chalk.blue('üó∫Ô∏è –ü–µ—Ä–µ—Ö–≤–∞—Ç API /api/realty-map/ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã...'));
    
    let realtyMapData = null;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log(chalk.blue('üï∑Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç API...'));
    
    this.page.on('response', async response => {
      const url = response.url();
      const status = response.status();
      
      if (status === 200 && url.includes('/api/realty-map/')) {
        console.log(chalk.green(`üì• –û–¢–í–ï–¢ REALTY-MAP API: ${url}`));
        
        try {
          const contentType = response.headers()['content-type'] || '';
          
          if (contentType.includes('application/json')) {
            const data = await response.json();
            const dataSize = JSON.stringify(data).length;
            
            console.log(chalk.green(`‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${dataSize} –±–∞–π—Ç`));
            
            realtyMapData = data;
            
            if (data.realties) {
              console.log(chalk.green(`üéâ –ù–ê–ô–î–ï–ù–û –ü–û–õ–ï REALTIES: ${data.realties.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
              this.realtiesData = data.realties;
            }
          }
          
        } catch (error) {
          console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
        }
      }
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç—ã
    const mapUrl = 'https://www.hepsiemlak.com/harita/konyaalti-satilik?districts=uluc,uncali,konyaalti-liman-mah,hurma,konyaalti-sarisu,konyaalti-altinkum&floorCounts=1-5&mapTopLeft=36.89465474733249,%2030.53083419799805&mapBottomRight=36.81285800626765,%2030.66069602966309&p37=120401';
    
    console.log(chalk.yellow(`üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–∞—Ä—Ç—É: ${mapUrl}`));
    
    await this.page.goto(mapUrl, { 
      waitUntil: 'domcontentloaded',
      timeout: 60000 
    });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ API
    console.log(chalk.cyan('‚è∞ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ API (30 —Å–µ–∫—É–Ω–¥)...'));
    await new Promise(resolve => setTimeout(resolve, 30000));

    if (this.realtiesData.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç—ã');
    }

    console.log(chalk.green(`‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –ü–æ–ª—É—á–µ–Ω–æ ${this.realtiesData.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    await fs.writeFile('step1-map-data.json', JSON.stringify({
      timestamp: new Date().toISOString(),
      totalCount: this.realtiesData.length,
      realties: this.realtiesData
    }, null, 2));
    
    return this.realtiesData;
  }

  generateDetailUrl(listingId) {
    return `https://www.hepsiemlak.com/antalya-konyaalti-liman-satilik/daire/${listingId}`;
  }

  async parseDetailPage(realty, index, total) {
    const { listingId, realtyId, price, mapLocation } = realty;
    const url = this.generateDetailUrl(listingId);
    
    console.log(chalk.cyan(`\n[${index + 1}/${total}] üîç –ü–∞—Ä—Å–∏–Ω–≥: ${listingId}`));
    console.log(chalk.gray(`üîó ${url}`));

    try {
      await this.page.goto(url, { 
        waitUntil: 'domcontentloaded',
        timeout: 30000 
      });

      // –û–±—Ö–æ–¥–∏–º cloudflare –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await this.handleCloudflare();

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 5000));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      const title = await this.page.title();
      if (title.includes('404') || title.includes('Sayfa Bulunamadƒ±')) {
        throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)');
      }

      // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const detailData = await this.page.evaluate(() => {
        const data = {
          // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          title: '',
          description: '',
          
          // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          source: window.location.href,
          priceText: '',
          province: '',
          listingNumber: '',
          listingDate: '',
          propertyType: '',
          housingType: '',
          housingForm: '',
          roomCount: '',
          bathroomCount: '',
          areaBrutoNeto: '',
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          floor: '',
          totalFloors: '',
          age: '',
          heating: '',
          dues: '',
          deposit: '',
          creditEligibility: '',
          exchange: '',
          deedStatus: '',
          fromWhom: '',
          
          // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          features: [],
          location: {},
          contact: {},
          images: [],
          specifications: {}
        };

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const titleEl = document.querySelector('h1.fontRB, h1, .listing-title');
        if (titleEl) data.title = titleEl.textContent.trim();

        // –¶–µ–Ω–∞ (–ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const priceEl = document.querySelector('.fz24-text.price');
        if (priceEl) {
          data.priceText = priceEl.textContent.trim();
        }

        // –ü—Ä–æ–≤–∏–Ω—Ü–∏—è (–ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)  
        const provinceEl = document.querySelector('.detail-info-location');
        if (provinceEl) {
          data.province = provinceEl.textContent
            .trim()
            .replace(/\s+/g, ' ')  // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            .replace(/\n/g, ' ');  // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        }

        // –û–ø–∏—Å–∞–Ω–∏–µ
        const descEl = document.querySelector('.ql-editor.description-content, .description');
        if (descEl) data.description = descEl.textContent.trim();

        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã .adv-info-list —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ .spec-item
        const specs = {};
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ hepsiemlak
        const advInfoList = document.querySelector('.adv-info-list');
        if (advInfoList) {
          const specItems = advInfoList.querySelectorAll('.spec-item');
          specItems.forEach(item => {
            // –ò—â–µ–º –ª–µ–π–±–ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ spec-item
            const labelEl = item.querySelector('.spec-item-label, .label, dt, th, .key');
            const valueEl = item.querySelector('.spec-item-value, .value, dd, td, .val');
            
            if (labelEl && valueEl) {
              const key = labelEl.textContent.trim();
              let value = valueEl.textContent.trim();
              
              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "Br√ºt / Net M2" - –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —Å–ø–∞–Ω–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ item
              if (key.includes('Br√ºt') && key.includes('Net') && key.includes('M2')) {
                const allSpans = item.querySelectorAll('span:not(.txt)');
                if (allSpans.length >= 2) {
                  const brutValue = allSpans[0].textContent.trim().replace(/&nbsp;/g, ' ');
                  const netValue = allSpans[1].textContent.trim();
                  value = `${brutValue}${netValue}`;
                }
              }
              
              if (key && value && key.length < 100 && value.length < 500) {
                specs[key] = value;
              }
            } else {
              // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: –∫–ª—é—á –≤ tooltip-wrapper, –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∞–Ω–∞—Ö
              const tooltipKey = item.querySelector('.tooltip-wrapper .txt, .spec-item__tooltip .txt');
              
              if (tooltipKey) {
                const key = tooltipKey.textContent.trim();
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "Br√ºt / Net M2" - –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —Å–ø–∞–Ω–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ item
                if (key.includes('Br√ºt') && key.includes('Net') && key.includes('M2')) {
                  const allSpans = item.querySelectorAll('span:not(.txt)'); // –∏—Å–∫–ª—é—á–∞–µ–º span —Å –∫–ª–∞—Å—Å–æ–º txt (—ç—Ç–æ –∫–ª—é—á)
                  if (allSpans.length >= 2) {
                    const brutValue = allSpans[0].textContent.trim().replace(/&nbsp;/g, ' ');
                    const netValue = allSpans[1].textContent.trim();
                    const value = `${brutValue}${netValue}`;
                    specs[key] = value;
                  }
                } else {
                  // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                  const valueSpans = item.querySelectorAll('span:not(.txt)');
                  if (valueSpans.length > 0) {
                    const value = Array.from(valueSpans).map(span => span.textContent.trim()).join(' ');
                    if (key && value && key.length < 100 && value.length < 500) {
                      specs[key] = value;
                    }
                  }
                }
              } else {
                // –°–æ–≤—Å–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
                const children = item.children;
                if (children.length >= 2) {
                  const key = children[0].textContent.trim();
                  const value = children[1].textContent.trim();
                  
                  if (key && value && key.length < 100 && value.length < 500) {
                    specs[key] = value;
                  }
                }
              }
            }
          });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        if (Object.keys(specs).length === 0) {
          const specRows = document.querySelectorAll(
            'table tr, .spec-table tr, .property-specs tr, .details-table tr, ' +
            '.detail-attributes tr, .listing-details tr'
          );
          
          specRows.forEach(row => {
            const cells = row.querySelectorAll('td, th');
            if (cells.length >= 2) {
              const key = cells[0].textContent.trim();
              const value = cells[1].textContent.trim();
              if (key && value && key.length < 100 && value.length < 500) {
                specs[key] = value;
              }
            }
          });

          // –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
          const dtElements = document.querySelectorAll('dt');
          dtElements.forEach(dt => {
            const dd = dt.nextElementSibling;
            if (dd && dd.tagName === 'DD') {
              const key = dt.textContent.trim();
              const value = dd.textContent.trim();
              if (key && value) {
                specs[key] = value;
              }
            }
          });

          // –ü–æ–∏—Å–∫ –≤ div-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö —Å –ª–µ–π–±–ª–∞–º–∏
          const labelElements = document.querySelectorAll(
            '.label, .property-label, .detail-label, .attribute-label, ' +
            '.spec-label, .info-label, [class*="label"]'
          );
          
          labelElements.forEach(label => {
            const value = label.nextElementSibling || 
                         label.parentElement?.querySelector('.value, .property-value, .detail-value') ||
                         label.parentElement?.lastElementChild;
            
            if (value && value !== label) {
              const key = label.textContent.trim();
              const val = value.textContent.trim();
              if (key && val && key.length < 100 && val.length < 500) {
                specs[key] = val;
              }
            }
          });
        }

        // –û—á–∏—â–∞–µ–º –∫–ª—é—á–∏ –æ—Ç —Ç—Ä–æ–µ—Ç–æ—á–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanedSpecs = {};
        for (const [key, value] of Object.entries(specs)) {
          let cleanKey;
          // –ï—Å–ª–∏ –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–æ–µ—Ç–æ—á–∏—è, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–ª–æ–≤–∞
          if (key.includes('...')) {
            const words = key.trim().split(/\s+/);
            cleanKey = words.slice(-2).join(' ');
          } else {
            cleanKey = key.trim();
          }
          cleanedSpecs[cleanKey] = value;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
        data.table = { ...cleanedSpecs };

        // –°–æ–∑–¥–∞–µ–º specifications —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const specifications = {
          '–ù–∞–∑–≤–∞–Ω–∏–µ': data.title || '',
          '–ò—Å—Ç–æ—á–Ω–∏–∫': data.source || '',
          '–¶–µ–Ω–∞': data.priceText || '',
          '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è': data.province || '',
          '–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è': cleanedSpecs['ƒ∞lan no'] || '',
          '–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è': new Date(data.parsedAt).toLocaleDateString('ru-RU') || '',
          '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': cleanedSpecs['Konut Tipi'] || '',
          '–º¬≤ (–±—Ä—É—Ç—Ç–æ)': '',
          '–º¬≤ (–Ω–µ—Ç—Ç–æ)': '',
          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç': cleanedSpecs['Oda Sayƒ±sƒ±'] || '',
          '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å': '',
          '–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç': cleanedSpecs['Bina Ya≈üƒ±'] || '',
          '–¢–∏–ø –∑–¥–∞–Ω–∏—è': cleanedSpecs['Yapƒ±nƒ±n Durumu'] || '',
          '–°—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è': cleanedSpecs['Yapƒ±nƒ±n Durumu'] || '',
          '–°—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞': cleanedSpecs['Cephe'] || '',
          '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞': cleanedSpecs['Bulunduƒüu Kat'] || '',
          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π': cleanedSpecs['Kat Sayƒ±sƒ±'] || '',
          '–û—Ç–æ–ø–ª–µ–Ω–∏–µ': cleanedSpecs['Isƒ±nma Tipi'] || '',
          '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': cleanedSpecs['Yakƒ±t Tipi'] || '',
          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö': cleanedSpecs['Banyo Sayƒ±sƒ±'] || '',
          '–ö—É—Ö–Ω—è': '',
          '–ë–∞–ª–∫–æ–Ω': '',
          '–õ–∏—Ñ—Ç': '',
          '–ü–∞—Ä–∫–æ–≤–∫–∞': '',
          '–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–æ': cleanedSpecs['E≈üya Durumu'] || '',
          '–°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': cleanedSpecs['Kullanƒ±m Durumu'] || '',
          '–°–∏—Ç—ç': cleanedSpecs['Site ƒ∞√ßerisinde'] || '',
          '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ç—ç': '',
          '–ê–π–¥–∞—Ç': cleanedSpecs['Aidat'] || '',
          '–ü—Ä–∞–≤–æ –Ω–∞ –∫—Ä–µ–¥–∏—Ç': cleanedSpecs['Krediye Uygunlu'] || '',
          '–°—Ç–∞—Ç—É—Å –¢–∏—Ç—É–ª–∞': cleanedSpecs['Tapu Durumu'] || '',
          '–û—Ç –∫–æ–≥–æ': cleanedSpecs['Yetkili Ofis'] || '',
          '–û–±–º–µ–Ω': cleanedSpecs['Takas'] || ''
        };

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "Br√ºt / Net M2" - –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        const brutNetValue = cleanedSpecs['Br√ºt / Net M2'] || '';
        if (brutNetValue.includes('/')) {
          const parts = brutNetValue.split('/');
          specifications['–º¬≤ (–±—Ä—É—Ç—Ç–æ)'] = parts[0].trim();
          specifications['–º¬≤ (–Ω–µ—Ç—Ç–æ)'] = parts[1].trim();
        } else if (brutNetValue) {
          specifications['–º¬≤ (–±—Ä—É—Ç—Ç–æ)'] = brutNetValue;
        }

        data.specifications = specifications;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º listingNumber –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        data.listingNumber = cleanedSpecs['ƒ∞lan no'] || '';



        // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        const featureSelectors = [
          '.features li', '.amenities li', '.property-features li',
          '.listing-features li', '.detail-features li', '.attributes li',
          '[class*="feature"] li', '[class*="amenity"] li'
        ];
        
        featureSelectors.forEach(selector => {
          document.querySelectorAll(selector).forEach(el => {
            const feature = el.textContent.trim();
            if (feature && feature.length > 2 && feature.length < 200) {
              data.features.push(feature);
            }
          });
        });

        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imgEls = document.querySelectorAll('img');
        imgEls.forEach(img => {
          const src = img.src || img.getAttribute('data-src') || img.getAttribute('data-lazy-src');
          if (src && 
              !src.includes('placeholder') && 
              !src.includes('data:image/svg') &&
              !src.includes('flag_') &&
              !src.includes('icon') &&
              !src.includes('logo') &&
              src.length > 50) {
            data.images.push(src);
          }
        });

        // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const phoneSelectors = [
          '.phone', '.contact-phone', '.agent-phone', '.listing-phone',
          '[class*="phone"]', '[data-testid*="phone"]'
        ];
        
        phoneSelectors.forEach(selector => {
          const phoneEl = document.querySelector(selector);
          if (phoneEl && !data.contact.phone) {
            const phone = phoneEl.textContent.trim();
            if (phone && phone.length > 5) {
              data.contact.phone = phone;
            }
          }
        });

        const agentSelectors = [
          '.agent-name', '.contact-name', '.listing-agent', '.broker-name',
          '[class*="agent"]', '[class*="broker"]'
        ];
        
        agentSelectors.forEach(selector => {
          const agentEl = document.querySelector(selector);
          if (agentEl && !data.contact.agent) {
            const agent = agentEl.textContent.trim();
            if (agent && agent.length > 2) {
              data.contact.agent = agent;
            }
          }
        });

        // –ê–¥—Ä–µ—Å
        const addressSelectors = [
          '.address', '.location', '.property-address', '.listing-address',
          '[class*="address"]', '[class*="location"]'
        ];
        
        addressSelectors.forEach(selector => {
          const addressEl = document.querySelector(selector);
          if (addressEl && !data.location.address) {
            const address = addressEl.textContent.trim();
            if (address && address.length > 5) {
              data.location.address = address;
            }
          }
        });

        return data;
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      const translatedData = this.applyTranslations(detailData);

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const result = {
        specifications: translatedData.specifications,
        table: translatedData.table,
        contact: translatedData.contact,
        success: true,
        parsedAt: new Date().toISOString(),
        url,
        mapLocation,
        priceFromAPI: price,
        realtyId,
        listingId,
        images: translatedData.images
      };

      this.detailResults.push(result);
      console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`));
      
      return result;

    } catch (error) {
      console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ ${listingId}: ${error.message}`));
      
      const errorResult = {
        listingId,
        realtyId,
        price,
        mapLocation,
        url,
        error: error.message,
        parsedAt: new Date().toISOString(),
        success: false
      };

      this.errors.push(errorResult);
      return errorResult;
    }
  }

  applyTranslations(data) {
    const translated = { ...data };
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (propertyType –∏ housingType –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
    const fieldsToTranslate = [
      'housingForm', 'floor', 'heating', 'creditEligibility', 'exchange', 'deedStatus', 'fromWhom'
    ];
    
    fieldsToTranslate.forEach(field => {
      if (translated[field]) {
        translated[field] = this.translateField(translated[field]);
      }
    });

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const translatedSpecs = {};
    for (const [key, value] of Object.entries(translated.specifications || {})) {
      const translatedKey = this.translateField(key);
      const translatedValue = this.translateField(value);
      translatedSpecs[translatedKey] = translatedValue;
    }
    translated.specifications = translatedSpecs;

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    if (translated.features) {
      translated.features = translated.features.map(feature => this.translateField(feature));
    }

    return translated;
  }

  async handleCloudflare() {
    try {
      const title = await this.page.title();
      if (title.includes('Challenge') || title.includes('Checking') || title.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
        console.log(chalk.yellow('üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Cloudflare, –æ–∂–∏–¥–∞–µ–º...'));
        
        let attempts = 0;
        while (attempts < 12) {
          await new Promise(resolve => setTimeout(resolve, 5000));
          const newTitle = await this.page.title();
          if (!newTitle.includes('Challenge') && !newTitle.includes('Checking') && !newTitle.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
            console.log(chalk.green('‚úÖ Cloudflare –ø—Ä–æ–π–¥–µ–Ω!'));
            break;
          }
          attempts++;
        }
      }
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...'));
    }
  }

  async step2_ParseDetailPages(limit = null, processedUrls = []) {
    console.log(chalk.yellow('\nüìÑ –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü'));
    
    if (this.realtiesData.length === 0) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∞–ø 1');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL
    let filteredData = this.realtiesData;
    
    if (processedUrls.length > 0) {
      const initialCount = filteredData.length;
      
      filteredData = filteredData.filter(realty => {
        const url = this.generateDetailUrl(realty.listingId);
        return !processedUrls.includes(url);
      });
      
      const skippedCount = initialCount - filteredData.length;
      
      console.log(chalk.cyan(`üîÑ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${initialCount}`));
      console.log(chalk.yellow(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): ${skippedCount}`));
      console.log(chalk.green(`üÜï –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${filteredData.length}`));
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const dataToProcess = limit ? filteredData.slice(0, limit) : filteredData;
    const total = dataToProcess.length;
    
    if (total === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'));
      return;
    }
    
    console.log(chalk.blue(`üìã –ü–∞—Ä—Å–∏–º ${total} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`));
    
    for (let i = 0; i < total; i++) {
      const realty = dataToProcess[i];
      
      await this.parseDetailPage(realty, i, total);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < total - 1) {
        console.log(chalk.gray('‚è∞ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...'));
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }

    console.log(chalk.green(`\n‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù`));
    console.log(chalk.cyan(`üìä –£—Å–ø–µ—à–Ω–æ: ${this.detailResults.length}`));
    console.log(chalk.red(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`));
  }

  async saveResults() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
    
    // JSON —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –∏–¥—É—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    const summary = {
      timestamp,
      mapData: this.realtiesData.length,
      successful: this.detailResults.length,
      failed: this.errors.length,
      successRate: this.detailResults.length > 0 ? 
        ((this.detailResults.length / (this.detailResults.length + this.errors.length)) * 100).toFixed(2) + '%' : '0%'
    };

    console.log(chalk.green('\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!'));
    console.log(chalk.cyan(`üìä –î–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ä—Ç—ã: ${summary.mapData}`));
    console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${summary.successful} (${summary.successRate})`));
    console.log(chalk.red(`‚ùå –û—à–∏–±–æ–∫: ${summary.failed}`));

    return summary;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log(chalk.blue('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç'));
    }
  }

  async run(testLimit = 5, processedUrls = []) {
    try {
      // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç—ã
      await this.step1_GetMapData();
      
      // –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      await this.step2_ParseDetailPages(testLimit, processedUrls);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.saveResults();
      
    } catch (error) {
      console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'), error.message);
      throw error;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ hepsiemlak
async function runHepsiemlak(testLimit = null, processedUrls = []) {
  const parser = new HepsiemlakParser();

  try {
    await parser.init();
    await parser.run(testLimit, processedUrls);
    return parser.detailResults;
  } catch (error) {
    console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ hepsiemlak:'), error.message);
    throw error;
  } finally {
    await parser.close();
  }
}

export { HepsiemlakParser, runHepsiemlak }; 