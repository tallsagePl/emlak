import { connect } from 'puppeteer-real-browser';
import chalk from 'chalk';

class EmlakjetParser {
  constructor() {
    this.browser = null;
    this.page = null;
    this.listingUrls = [];
    this.detailResults = [];
    this.errors = [];
    
    // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª–µ–π EmlakJet
    this.translationMap = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      'ƒ∞lan Numarasƒ±': '–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      'ƒ∞lan Olu≈üturma Tarihi': '–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', 
      'Kategorisi': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      'Tipi': '–¢–∏–ø1',
      'T√ºr√º': '–¢–∏–ø2',
      'Br√ºt Metrekare': '–º¬≤ (–±—Ä—É—Ç—Ç–æ)',
      'Net Metrekare': '–º¬≤ (–Ω–µ—Ç—Ç–æ)',
      'Oda Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
      'Binanƒ±n Ya≈üƒ±': '–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç',
      'Bulunduƒüu Kat': '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞',
      'Binanƒ±n Kat Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      'Satƒ±lƒ±k': '–ü—Ä–æ–¥–∞–∂–∞',
      'Kiralƒ±k': '–ê—Ä–µ–Ω–¥–∞',
      'Daire': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
      'Villa': '–í–∏–ª–ª–∞',
      'M√ºstakil Ev': '–û—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–º',
      'Residence': '–†–µ–∑–∏–¥–µ–Ω—Ü–∏—è',
      'ƒ∞kinci El': '–í—Ç–æ—Ä–∏—á–∫–∞',
      'Sƒ±fƒ±r': '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'
    };
    
    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞
    this.baseUrl = 'https://www.emlakjet.com/satilik-daire/antalya-konyaalti-liman-mahallesi';
  }

  async init() {
    console.log(chalk.blue('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ EmlakJet...'));
    
    const { browser, page } = await connect({
      headless: false,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--no-default-browser-check',
        '--disable-default-apps',
        '--disable-popup-blocking',
        '--disable-translate',
        '--disable-background-timer-throttling',
        '--disable-renderer-backgrounding',
        '--disable-backgrounding-occluded-windows',
        '--disable-ipc-flooding-protection'
      ],
      turnstile: true,
      connectOption: {
        defaultViewport: { width: 1366, height: 768 }
      }
    });

    this.browser = browser;
    this.page = page;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞
    await this.page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
      });
    });
    
    console.log(chalk.green('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω'));
  }

  translateField(text) {
    if (!text) return text;
    
    for (const [turkish, russian] of Object.entries(this.translationMap)) {
      text = text.replace(new RegExp(turkish, 'gi'), russian);
    }
    
    return text;
  }

  async step1_GetListingUrls() {
    console.log(chalk.yellow('\nüìç –≠–¢–ê–ü 1: –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'));
    
    let currentPage = 1;
    let hasNextPage = true;
    let previousUrls = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫
    
    while (hasNextPage) {
      const pageUrl = currentPage === 1 
        ? `${this.baseUrl}?tarih_araligi=1`
        : `${this.baseUrl}?tarih_araligi=1&sayfa=${currentPage}`;
      
      console.log(chalk.blue(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: ${pageUrl}`));
      
      try {
        await this.page.goto(pageUrl, { 
          waitUntil: 'domcontentloaded',
          timeout: 30000 
        });

        await this.handleCloudflare();
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageUrls = await this.page.evaluate(() => {
          const links = [];
          
          // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
          const selectors = [
            'a[href*="/ilan/"]', // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è EmlakJet
            'a[href*="/satilik-daire/"]',
            'a[href*="/kiralƒ±k-daire/"]',
            '.listing-item a',
            '.property-card a',
            '.ilan-card a'
          ];
          
          for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
              const href = el.href;
              if (href && href.includes('/ilan/') && !links.includes(href)) {
                links.push(href);
              }
            });
            
            if (links.length > 0) break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
          }
          
          return [...new Set(links)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        });
        
        console.log(chalk.cyan(`üîó –ù–∞–π–¥–µ–Ω–æ ${pageUrls.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`));
        
        if (pageUrls.length === 0) {
          console.log(chalk.yellow(`‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} - –∑–∞–≤–µ—Ä—à–∞–µ–º`));
          hasNextPage = false;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
          const newUrls = pageUrls.filter(url => !previousUrls.has(url));
          
          if (newUrls.length === 0) {
            console.log(chalk.yellow(`‚ö†Ô∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å - –∑–∞–≤–µ—Ä—à–∞–µ–º`));
            hasNextPage = false;
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
            this.listingUrls.push(...newUrls);
            pageUrls.forEach(url => previousUrls.add(url));
            
            console.log(chalk.green(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newUrls.length} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫`));
            
            currentPage++;
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if (currentPage > 10) {
              console.log(chalk.yellow('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (10) - –∑–∞–≤–µ—Ä—à–∞–µ–º'));
              hasNextPage = false;
            }
          }
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        if (hasNextPage) {
          console.log(chalk.gray('‚è∞ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...'));
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
      } catch (error) {
        console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}: ${error.message}`));
        hasNextPage = false;
      }
    }
    
    console.log(chalk.green(`‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –°–æ–±—Ä–∞–Ω–æ ${this.listingUrls.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`));
    return this.listingUrls;
  }

  async parseDetailPage(url, index, total) {
    console.log(chalk.cyan(`\n[${index + 1}/${total}] üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è`));
    console.log(chalk.gray(`üîó ${url}`));

    try {
      await this.page.goto(url, { 
        waitUntil: 'domcontentloaded',
        timeout: 30000 
      });

      await this.handleCloudflare();
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 5000));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      const title = await this.page.title();
      if (title.includes('404') || title.includes('Sayfa Bulunamadƒ±') || title.includes('Hata')) {
        throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const listingData = await this.page.evaluate(() => {
        const data = {
          url: window.location.href,
          title: '',
          price: '',
          specifications: {},
          description: '',
          features: [],
          location: '',
          parsedAt: new Date().toISOString()
        };

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titleEl = document.querySelector('h1') || document.querySelector('.listing-title') || document.querySelector('.property-title');
        if (titleEl) data.title = titleEl.textContent.trim();

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        const priceSelectors = [
          '.price',
          '.fiyat',
          '.listing-price',
          '.property-price',
          '[class*="price"]',
          '[class*="fiyat"]'
        ];
        
        for (const selector of priceSelectors) {
          const priceEl = document.querySelector(selector);
          if (priceEl) {
            data.price = priceEl.textContent.trim();
            break;
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏—é –∏–∑ breadcrumb –∏–ª–∏ –∞–¥—Ä–µ—Å–∞
        const locationSelectors = [
          '.breadcrumb',
          '.address',
          '.location',
          '.adres',
          '[class*="location"]',
          '[class*="address"]'
        ];
        
        for (const selector of locationSelectors) {
          const locationEl = document.querySelector(selector);
          if (locationEl) {
            data.location = locationEl.textContent.trim();
            break;
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ EmlakJet
        const specContainer = document.querySelector('.styles_inner__sV8Bk');
        if (specContainer) {
          const keys = specContainer.querySelectorAll('.styles_key__VqMhC');
          const values = specContainer.querySelectorAll('.styles_value__3QmL3');
          
          // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–∞—Ä–∞–º –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
          for (let i = 0; i < Math.min(keys.length, values.length); i++) {
            const key = keys[i].textContent.trim();
            const value = values[i].textContent.trim();
            if (key && value) {
              data.specifications[key] = value;
            }
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const descSelectors = [
          '.description',
          '.aciklama',
          '.property-description',
          '.listing-description',
          '[class*="description"]'
        ];

        for (const selector of descSelectors) {
          const descEl = document.querySelector(selector);
          if (descEl) {
            data.description = descEl.textContent.trim();
            break;
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏/—É–¥–æ–±—Å—Ç–≤–∞
        const featureSelectors = [
          '.features li',
          '.amenities li', 
          '.ozellikler li',
          '.imkanlar li',
          '.facilities li'
        ];

        for (const selector of featureSelectors) {
          const features = document.querySelectorAll(selector);
          if (features.length > 0) {
            features.forEach(feature => {
              const text = feature.textContent.trim();
              if (text) data.features.push(text);
            });
            break;
          }
        }

        return data;
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const priceMatch = listingData.price.match(/[\d.,]+/);
      const priceFromAPI = priceMatch ? parseInt(priceMatch[0].replace(/[.,]/g, '')) : null;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      const translatedData = this.applyTranslations(listingData);
      
      const result = {
        ...translatedData,
        priceFromAPI,
        listingId: this.extractListingId(url),
        success: true
      };

      console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`));
      
      this.detailResults.push(result);
      return result;

    } catch (error) {
      console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
      
      const errorResult = {
        url,
        error: error.message,
        parsedAt: new Date().toISOString(),
        success: false
      };

      this.errors.push(errorResult);
      return errorResult;
    }
  }

  extractListingId(url) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ URL EmlakJet
    // –§–æ—Ä–º–∞—Ç: https://www.emlakjet.com/ilan/–Ω–∞–∑–≤–∞–Ω–∏–µ-–æ–±—ä—è–≤–ª–µ–Ω–∏—è-17587498/
    const match = url.match(/-(\d+)\/?$/);
    if (match) {
      return match[1];
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –∏—â–µ–º —Ü–∏—Ñ—Ä—ã –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ URL
    const fallbackMatch = url.match(/(\d+)\/?$/);
    return fallbackMatch ? fallbackMatch[1] : null;
  }

  applyTranslations(data) {
    const translated = { ...data };
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const translatedSpecs = {};
    for (const [key, value] of Object.entries(translated.specifications || {})) {
      const translatedKey = this.translateField(key);
      const translatedValue = this.translateField(value);
      translatedSpecs[translatedKey] = translatedValue;
    }
    translated.specifications = translatedSpecs;

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    if (translated.features) {
      translated.features = translated.features.map(feature => this.translateField(feature));
    }

    return translated;
  }

  async handleCloudflare() {
    try {
      const title = await this.page.title();
      if (title.includes('Challenge') || title.includes('Checking') || title.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
        console.log(chalk.yellow('üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Cloudflare, –æ–∂–∏–¥–∞–µ–º...'));
        
        let attempts = 0;
        while (attempts < 12) {
          await new Promise(resolve => setTimeout(resolve, 5000));
          const newTitle = await this.page.title();
          if (!newTitle.includes('Challenge') && !newTitle.includes('Checking') && !newTitle.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
            console.log(chalk.green('‚úÖ Cloudflare –ø—Ä–æ–π–¥–µ–Ω!'));
            break;
          }
          attempts++;
        }
      }
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...'));
    }
  }

  async step2_ParseDetailPages(limit = null, processedUrls = []) {
    console.log(chalk.yellow('\nüìÑ –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü'));
    
    if (this.listingUrls.length === 0) {
      throw new Error('–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∞–ø 1');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL
    let filteredUrls = this.listingUrls;
    
    if (processedUrls.length > 0) {
      const initialCount = filteredUrls.length;
      filteredUrls = filteredUrls.filter(url => !processedUrls.includes(url));
      
      const skippedCount = initialCount - filteredUrls.length;
      
      console.log(chalk.cyan(`üîÑ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${initialCount}`));
      console.log(chalk.yellow(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): ${skippedCount}`));
      console.log(chalk.green(`üÜï –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${filteredUrls.length}`));
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const urlsToProcess = limit ? filteredUrls.slice(0, limit) : filteredUrls;
    const total = urlsToProcess.length;
    
    if (total === 0) {
      console.log(chalk.yellow('‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'));
      return;
    }
    
    console.log(chalk.blue(`üìã –ü–∞—Ä—Å–∏–º ${total} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`));
    
    for (let i = 0; i < total; i++) {
      const url = urlsToProcess[i];
      
      await this.parseDetailPage(url, i, total);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < total - 1) {
        console.log(chalk.gray('‚è∞ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...'));
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }

    console.log(chalk.green(`\n‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù`));
    console.log(chalk.cyan(`üìä –£—Å–ø–µ—à–Ω–æ: ${this.detailResults.length}`));
    console.log(chalk.red(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`));
  }

  async saveResults() {
    // JSON —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –∏–¥—É—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    const summary = {
      timestamp: new Date().toISOString(),
      totalUrls: this.listingUrls.length,
      successful: this.detailResults.length,
      failed: this.errors.length,
      successRate: this.detailResults.length > 0 ? 
        ((this.detailResults.length / (this.detailResults.length + this.errors.length)) * 100).toFixed(2) + '%' : '0%'
    };

    console.log(chalk.green('\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!'));
    console.log(chalk.cyan(`üìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${summary.totalUrls}`));
    console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${summary.successful} (${summary.successRate})`));
    console.log(chalk.red(`‚ùå –û—à–∏–±–æ–∫: ${summary.failed}`));

    return summary;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log(chalk.blue('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç'));
    }
  }

  async run(testLimit = 5, processedUrls = []) {
    try {
      // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      await this.step1_GetListingUrls();
      
      // –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.step2_ParseDetailPages(testLimit, processedUrls);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
      await this.saveResults();
      
    } catch (error) {
      console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'), error.message);
      throw error;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ emlakjet
async function runEmlakjet(testLimit = null, processedUrls = []) {
  const parser = new EmlakjetParser();

  try {
    await parser.init();
    await parser.run(testLimit, processedUrls);
    return parser.detailResults;
  } catch (error) {
    console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ emlakjet:'), error.message);
    throw error;
  } finally {
    await parser.close();
  }
}

export { EmlakjetParser, runEmlakjet };

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
// (async () => {
//   console.log(chalk.blue('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ EmlakJet...'));
//   try {
//     const results = await runEmlakjet(2);
//     results.forEach((result, index) => {
//       console.log(chalk.cyan(`=== –û–ë–™–Ø–í–õ–ï–ù–ò–ï ${index + 1} ===`));
//       console.log(JSON.stringify(result, null, 2));
//     });
//   } catch (error) {
//     console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
//   }
// })(); 