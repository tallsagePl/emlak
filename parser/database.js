// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
import database from '../database/index.js';
import chalk from 'chalk';

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API –ø–∞—Ä—Å–µ—Ä–∞
class ParserDatabaseAdapter {
  constructor() {
    this.database = database;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  async connect() {
    try {
      await this.database.init();
      console.log(chalk.green('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'));
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:'), error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL –¥–ª—è —Å–∞–π—Ç–∞
  async getProcessedUrls(siteName) {
    try {
      return await this.database.getProcessedUrls(siteName);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è ${siteName}:`), error.message);
      return [];
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å URL –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
  async addProcessedUrl(siteName, url) {
    try {
      await this.database.addProcessedUrls(siteName, [url]);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL ${url}:`), error.message);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ URL –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
  async addProcessedUrls(siteName, urls) {
    try {
      await this.database.addProcessedUrls(siteName, urls);
      console.log(chalk.cyan(`üìù –î–æ–±–∞–≤–ª–µ–Ω–æ ${urls.length} URL –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–ª—è ${siteName}`));
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL:`), error.message);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ URL
  async isUrlProcessed(siteName, url) {
    try {
      const processedUrls = await this.getProcessedUrls(siteName);
      return processedUrls.includes(url);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL ${url}:`), error.message);
      return false;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  async saveParsingResult(siteName, data) {
    try {
      const listingData = {
        site_name: siteName,
        listing_id: data.listingId || data.specifications?.['–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è'] || null,
        url: data.url,
        data: data,
        price_numeric: data.priceFromAPI || null,
        coordinates: data.mapLocation || null
      };

      const result = await this.database.saveParsedListing(listingData);
      return result.id;
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`), error.message);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
  async saveParsingResults(siteName, results) {
    try {
      const savedIds = [];
      const successfulUrls = [];
      
      for (const result of results) {
        if (result.success) {
          try {
            const id = await this.saveParsingResult(siteName, result);
            savedIds.push(id);
            successfulUrls.push(result.url);
          } catch (error) {
            console.error(chalk.yellow(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${result.url}:`, error.message));
          }
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ URL –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      if (successfulUrls.length > 0) {
        await this.addProcessedUrls(siteName, successfulUrls);
      }

      return {
        savedIds,
        successfulUrls,
        savedCount: savedIds.length,
        totalCount: results.length
      };
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`), error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–π—Ç–∞
  async getSiteStats(siteName) {
    try {
      const [parserStats, listingsStats] = await Promise.all([
        this.database.getParserStats(siteName),
        this.database.getListingsStats(siteName)
      ]);

      const parserStat = parserStats[0] || {};
      const listingStat = listingsStats[0] || {};

      return {
        site_name: siteName,
        processed_urls_count: parserStat.urls_count || 0,
        total_processed: parserStat.total_processed || 0,
        saved_listings: parseInt(listingStat.total_listings) || 0,
        last_updated: parserStat.last_updated || null,
        last_parsed: listingStat.last_parsed || null,
        first_parsed: listingStat.first_parsed || null,
        avg_price: parseFloat(listingStat.avg_price) || 0
      };
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${siteName}:`), error.message);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
  async getAllStats() {
    try {
      const [parserStats, listingsStats] = await Promise.all([
        this.database.getParserStats(),
        this.database.getListingsStats()
      ]);

      const combined = {};

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
      parserStats.forEach(stat => {
        combined[stat.site_name] = {
          site_name: stat.site_name,
          processed_urls_count: stat.urls_count || 0,
          total_processed: stat.total_processed || 0,
          last_updated: stat.last_updated,
          saved_listings: 0,
          last_parsed: null,
          first_parsed: null,
          avg_price: 0
        };
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
      listingsStats.forEach(stat => {
        if (combined[stat.site_name]) {
          combined[stat.site_name].saved_listings = parseInt(stat.total_listings) || 0;
          combined[stat.site_name].last_parsed = stat.last_parsed;
          combined[stat.site_name].first_parsed = stat.first_parsed;
          combined[stat.site_name].avg_price = parseFloat(stat.avg_price) || 0;
        }
      });

      return Object.values(combined);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`), error.message);
      return [];
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
  async cleanOldData(siteName, daysToKeep = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      const query = `
        DELETE FROM parsed_listings 
        WHERE site_name = $1 AND created_at < $2
      `;
      
      const result = await this.database.query(query, [siteName, cutoffDate.toISOString()]);
      
      console.log(chalk.blue(`üßπ –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è ${siteName}`));
      
      return result.rowCount;
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${siteName}:`), error.message);
      return 0;
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
  async logActivity(siteName, logType, message, details = null) {
    try {
      await this.database.logParserActivity(siteName, logType, message, details);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:`), error.message);
    }
  }

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  async close() {
    try {
      await this.database.close();
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:'), error.message);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
const databaseManager = new ParserDatabaseAdapter();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
export default databaseManager; 