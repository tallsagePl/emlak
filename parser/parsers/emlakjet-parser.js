import { CONSTANTS } from '../utils/index.js';
import { 
    formatPrice,
    formatDate,
    cleanText,
    extractNumber,
    handleCloudflare,
    initBrowser,
    collectImages
} from '../utils/index.js';

export class EmlakjetParser {
  constructor() {
    this.browser = null;
    this.page = null;
    this.listingUrls = [];
    this.detailResults = [];
    this.errors = [];
    
    // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª–µ–π EmlakJet
    this.translationMap = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      'ƒ∞lan Numarasƒ±': '–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      'ƒ∞lan Olu≈üturma Tarihi': '–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      'ƒ∞lan G√ºncelleme Tarihi': '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      'Kategorisi': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      'Tipi': '–¢–∏–ø1',
      'T√ºr√º': '–¢–∏–ø2',
      'Br√ºt Metrekare': '–º¬≤ (–±—Ä—É—Ç—Ç–æ)',
      'Net Metrekare': '–º¬≤ (–Ω–µ—Ç—Ç–æ)',
      'Oda Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
      'Binanƒ±n Ya≈üƒ±': '–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç',
      'Bulunduƒüu Kat': '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞',
      'Binanƒ±n Kat Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
      'Banyo Sayƒ±sƒ±': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö',
      'Isƒ±tma Tipi': '–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è',
      'Yakƒ±t Tipi': '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞',
      'Kullanƒ±m Durumu': '–°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      'Krediye Uygunluk': '–ü—Ä–∞–≤–æ –Ω–∞ –∫—Ä–µ–¥–∏—Ç',
      'Yatƒ±rƒ±ma Uygunluk': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å',
      'Tapu Durumu': '–°—Ç–∞—Ç—É—Å –¢–∏—Ç—É–ª–∞',
      'Site ƒ∞√ßerisinde': '–í –∫–æ–º–ø–ª–µ–∫—Å–µ',
      'E≈üya Durumu': '–ú–µ–±–ª–∏—Ä–æ–≤–∫–∞',
      'Takas': '–û–±–º–µ–Ω',
      'Fiyat Durumu': '–°—Ç–∞—Ç—É—Å —Ü–µ–Ω—ã',
      
      // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
      'Satƒ±lƒ±k': '–ü—Ä–æ–¥–∞–∂–∞',
      'Kiralƒ±k': '–ê—Ä–µ–Ω–¥–∞',
      'Daire': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
      'Villa': '–í–∏–ª–ª–∞',
      'M√ºstakil Ev': '–û—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–º',
      'Residence': '–†–µ–∑–∏–¥–µ–Ω—Ü–∏—è',
      'ƒ∞kinci El': '–í—Ç–æ—Ä–∏—á–∫–∞',
      'Sƒ±fƒ±r': '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞',
      'Evet': '–î–∞',
      'Hayƒ±r': '–ù–µ—Ç',
      'Yok': '–ù–µ—Ç',
      'Var': '–ï—Å—Ç—å',
      'Bilinmiyor': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      'Kombi Doƒüalgaz': '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≥–∞–∑–æ–≤–æ–µ',
      'M√ºlk Sahibi Oturuyor': '–ü—Ä–æ–∂–∏–≤–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫',
      'Krediye Uygun': '–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–µ–¥–∏—Ç',
      'Krediye Uygun Deƒüil': '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–µ–¥–∏—Ç',
      'Kat M√ºlkiyeti': '–ü—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
      'E≈üyalƒ±': '–° –º–µ–±–µ–ª—å—é',
      'E≈üyasƒ±z': '–ë–µ–∑ –º–µ–±–µ–ª–∏',
      'Genel Fiyat': '–û–±—â–∞—è —Ü–µ–Ω–∞'
    };
    
    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞
    this.baseUrl = 'https://www.emlakjet.com/satilik-daire/antalya-konyaalti-liman-mahallesi';
  }

  async init() {
    console.log(CONSTANTS.CHALK.blue('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ EmlakJet...'));
    
    const { browser, page } = await initBrowser();
    this.browser = browser;
    this.page = page;
    
    console.log(CONSTANTS.CHALK.green('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω'));
  }

  translateField(text) {
    if (!text || typeof text !== 'string') return text;
    
    for (const [turkish, russian] of Object.entries(this.translationMap)) {
      text = text.replace(new RegExp(turkish, 'gi'), russian);
    }
    
    return text;
  }

  async step1_GetListingUrls() {
    console.log(CONSTANTS.CHALK.yellow('\nüìç –≠–¢–ê–ü 1: –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'));
    
    let currentPage = 1;
    let hasNextPage = true;
    let previousUrls = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫
    
    while (hasNextPage) {
      const pageUrl = currentPage === 1 
        ? `${this.baseUrl}?tarih_araligi=1`
        : `${this.baseUrl}?tarih_araligi=1&sayfa=${currentPage}`;
      
      console.log(CONSTANTS.CHALK.blue(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: ${pageUrl}`));
      
      try {
        await this.page.goto(pageUrl, { 
          waitUntil: 'domcontentloaded',
          timeout: 30000 
        });

        await handleCloudflare(this.page);
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageUrls = await this.page.evaluate(() => {
          const links = [];
          
          // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
          const selectors = [
            'a[href*="/ilan/"]', // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è EmlakJet
            'a[href*="/satilik-daire/"]',
            'a[href*="/kiralƒ±k-daire/"]',
            '.listing-item a',
            '.property-card a',
            '.ilan-card a'
          ];
          
          for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
              const href = el.href;
              if (href && href.includes('/ilan/') && !links.includes(href)) {
                links.push(href);
              }
            });
            
            if (links.length > 0) break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
          }
          
          return [...new Set(links)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        });
        
        console.log(CONSTANTS.CHALK.cyan(`üîó –ù–∞–π–¥–µ–Ω–æ ${pageUrls.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`));
        
        if (pageUrls.length === 0) {
          console.log(CONSTANTS.CHALK.yellow(`‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} - –∑–∞–≤–µ—Ä—à–∞–µ–º`));
          hasNextPage = false;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
          const newUrls = pageUrls.filter(url => !previousUrls.has(url));
          
          if (newUrls.length === 0) {
            console.log(CONSTANTS.CHALK.yellow(`‚ö†Ô∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å - –∑–∞–≤–µ—Ä—à–∞–µ–º`));
            hasNextPage = false;
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
            this.listingUrls.push(...newUrls);
            pageUrls.forEach(url => previousUrls.add(url));
            
            console.log(CONSTANTS.CHALK.green(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newUrls.length} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫`));
            
            currentPage++;
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if (currentPage > 10) {
              console.log(CONSTANTS.CHALK.yellow('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (10) - –∑–∞–≤–µ—Ä—à–∞–µ–º'));
              hasNextPage = false;
            }
          }
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        if (hasNextPage) {
          console.log(CONSTANTS.CHALK.gray('‚è∞ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...'));
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
      } catch (error) {
        console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}: ${error.message}`));
        hasNextPage = false;
      }
    }
    
    console.log(CONSTANTS.CHALK.green(`‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –°–æ–±—Ä–∞–Ω–æ ${this.listingUrls.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`));
    return this.listingUrls;
  }

  async parseDetailPage(url, index, total) {
    console.log(CONSTANTS.CHALK.cyan(`\n[${index + 1}/${total}] üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è`));
    console.log(CONSTANTS.CHALK.gray(`üîó ${url}`));

    try {
      await this.page.goto(url, { 
        waitUntil: 'domcontentloaded',
        timeout: 30000 
      });

      await handleCloudflare(this.page);
      await new Promise(resolve => setTimeout(resolve, CONSTANTS.DELAYS.AFTER_PAGE_LOAD));

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const data = await this.page.evaluate(() => {
        const result = {
          table: {},  // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          specifications: {},  // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          title: '',
          price: '',
          location: '',
          description: '',
          url: window.location.href,
          date: ''
        };

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è EmlakJet
        const titleSelectors = [
          'h1', '.listing-title', '.property-title', '.ad-title', '.detail-title'
        ];
        
        const priceSelectors = [
          '.price', '.listing-price', '.property-price', '.ad-price', '.detail-price',
          '[class*="price"]', '[data-testid*="price"]'
        ];
        
        const locationSelectors = [
          '.location', '.address', '.property-location', '.listing-location',
          '[class*="location"]', '[class*="address"]'
        ];
        
        const descriptionSelectors = [
          '#classifiedDescription', '.description', '.listing-description', '.property-description', '.ad-description',
          '[class*="description"]', '.detail-content', '.content'
        ];

        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for (const selector of titleSelectors) {
          const el = document.querySelector(selector);
          if (el && el.textContent.trim()) {
            result.title = el.textContent.trim();
            break;
          }
        }

        // –ò—â–µ–º —Ü–µ–Ω—É
        for (const selector of priceSelectors) {
          const el = document.querySelector(selector);
          if (el && el.textContent.trim()) {
            result.price = el.textContent.trim();
            break;
          }
        }

        // –ò—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        for (const selector of locationSelectors) {
          const el = document.querySelector(selector);
          if (el && el.textContent.trim()) {
            result.location = el.textContent.trim();
            break;
          }
        }

        // –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è EmlakJet
        const descriptionEl = document.querySelector('#classifiedDescription');
        if (descriptionEl) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
          const paragraphs = descriptionEl.querySelectorAll('p');
          const descriptionParts = [];
          paragraphs.forEach(p => {
            const text = p.textContent.trim();
            if (text) {
              descriptionParts.push(text);
            }
          });
          result.description = descriptionParts.join(' ');
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ
          for (const selector of descriptionSelectors) {
            const el = document.querySelector(selector);
            if (el && el.textContent.trim()) {
              result.description = el.textContent.trim();
              break;
            }
          }
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã EmlakJet
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ EmlakJet
        const emlakjetList = document.querySelector('.styles_inner__sV8Bk ul');
        if (emlakjetList) {
          const listItems = emlakjetList.querySelectorAll('li');
          listItems.forEach(item => {
            const keyEl = item.querySelector('.styles_key__VqMhC');
            const valueEl = item.querySelector('.styles_value__3QmL3');
            
            if (keyEl && valueEl) {
              const key = keyEl.textContent.trim();
              const value = valueEl.textContent.trim();
              if (key && value) {
                result.table[key] = value;
              }
            }
          });
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if (Object.keys(result.table).length === 0) {
          const specSelectors = [
            '.spec-item', '.property-spec', '.detail-spec', '.listing-spec',
            '.feature-item', '.attribute-item', '.info-item'
          ];
          
          for (const selector of specSelectors) {
            const specs = document.querySelectorAll(selector);
            if (specs.length > 0) {
              specs.forEach(spec => {
                // –ò—â–µ–º –ª–µ–π–±–ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                const labelSelectors = ['.label', '.key', '.name', '.title', 'dt', 'th'];
                const valueSelectors = ['.value', '.val', '.data', '.content', 'dd', 'td'];
                
                let label = '';
                let value = '';
                
                // –ü–æ–∏—Å–∫ –ª–µ–π–±–ª–∞
                for (const lblSelector of labelSelectors) {
                  const lblEl = spec.querySelector(lblSelector);
                  if (lblEl) {
                    label = lblEl.textContent.trim();
                    break;
                  }
                }
                
                // –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è
                for (const valSelector of valueSelectors) {
                  const valEl = spec.querySelector(valSelector);
                  if (valEl) {
                    value = valEl.textContent.trim();
                    break;
                  }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ª–µ–π–±–ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                if (!label || !value) {
                  const children = spec.children;
                  if (children.length >= 2) {
                    label = children[0].textContent.trim();
                    value = children[1].textContent.trim();
                  }
                }
                
                if (label && value) {
                  result.table[label] = value;
                }
              });
              break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
            }
          }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã—à–µ, –∏—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if (Object.keys(result.table).length === 0) {
          const tables = document.querySelectorAll('table, .table, .specs-table');
          tables.forEach(table => {
            const rows = table.querySelectorAll('tr');
            rows.forEach(row => {
              const cells = row.querySelectorAll('td, th');
              if (cells.length >= 2) {
                const label = cells[0].textContent.trim();
                const value = cells[1].textContent.trim();
                if (label && value) {
                  result.table[label] = value;
                }
              }
            });
          });
        }

        return result;
      });

      // –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      data.images = await collectImages(this.page);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      data.price = formatPrice(data.price);
      data.date = formatDate(data.date);
      data.description = cleanText(data.description);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      if (data.table['Br√ºt Metrekare']) {
        data.table['Br√ºt Metrekare'] = extractNumber(data.table['Br√ºt Metrekare']) + ' –º¬≤';
      }
      if (data.table['Net Metrekare']) {
        data.table['Net Metrekare'] = extractNumber(data.table['Net Metrekare']) + ' –º¬≤';
      }

      // –°–æ–∑–¥–∞–µ–º specifications –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å HepsEmlak –ø–∞—Ä—Å–µ—Ä–æ–º
      data.specifications = {
        '–ù–∞–∑–≤–∞–Ω–∏–µ': data.title || '',
        '–ò—Å—Ç–æ—á–Ω–∏–∫': data.url || '',
        '–¶–µ–Ω–∞': data.price || '',
        '–ü—Ä–æ–≤–∏–Ω—Ü–∏—è': data.location || '',
        '–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è': data.table['ƒ∞lan Numarasƒ±'] || '',
        '–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è': data.table['ƒ∞lan Olu≈üturma Tarihi'] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': data.table['Tipi'] || '',
        '–º¬≤ (–±—Ä—É—Ç—Ç–æ)': data.table['Br√ºt Metrekare'] || '',
        '–º¬≤ (–Ω–µ—Ç—Ç–æ)': data.table['Net Metrekare'] || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç': data.table['Oda Sayƒ±sƒ±'] || '',
        '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å': data.table['ƒ∞lan G√ºncelleme Tarihi'] || '',
        '–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç': data.table['Binanƒ±n Ya≈üƒ±'] || '',
        '–¢–∏–ø –∑–¥–∞–Ω–∏—è': data.table['T√ºr√º'] || '',
        '–°—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è': data.table['T√ºr√º'] || '',
        '–°—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞': '',
        '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞': data.table['Bulunduƒüu Kat'] || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π': data.table['Binanƒ±n Kat Sayƒ±sƒ±'] || '',
        '–û—Ç–æ–ø–ª–µ–Ω–∏–µ': data.table['Isƒ±tma Tipi'] || '',
        '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': data.table['Yakƒ±t Tipi'] || '',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö': data.table['Banyo Sayƒ±sƒ±'] || '',
        '–ö—É—Ö–Ω—è': '',
        '–ë–∞–ª–∫–æ–Ω': '',
        '–õ–∏—Ñ—Ç': '',
        '–ü–∞—Ä–∫–æ–≤–∫–∞': '',
        '–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–æ': data.table['E≈üya Durumu'] || '',
        '–°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': data.table['Kullanƒ±m Durumu'] || '',
        '–°–∏—Ç—ç': data.table['Site ƒ∞√ßerisinde'] || '',
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ç—ç': '',
        '–ê–π–¥–∞—Ç': '',
        '–ü—Ä–∞–≤–æ –Ω–∞ –∫—Ä–µ–¥–∏—Ç': data.table['Krediye Uygunluk'] || '',
        '–°—Ç–∞—Ç—É—Å –¢–∏—Ç—É–ª–∞': data.table['Tapu Durumu'] || '',
        '–û—Ç –∫–æ–≥–æ': '',
        '–û–±–º–µ–Ω': data.table['Takas'] || '',
        '–û–ø–∏—Å–∞–Ω–∏–µ': data.description || ''
      };

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
      const translatedSpecs = {};
      for (const [key, value] of Object.entries(data.specifications)) {
        const translatedValue = this.translateField(value);
        translatedSpecs[key] = translatedValue;
      }
      data.specifications = translatedSpecs;

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = {
        ...data,
        success: true,
        parsedAt: new Date().toISOString(),
        url,
        listingId: this.extractListingId(url)
      };

      this.detailResults.push(result);
      console.log(CONSTANTS.CHALK.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`));

      return result;

    } catch (error) {
      console.error(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}: ${error.message}`));
      
      const errorResult = {
        url,
        listingId: this.extractListingId(url),
        error: error.message,
        parsedAt: new Date().toISOString(),
        success: false
      };

      this.errors.push(errorResult);
      return errorResult;
    }
  }

  extractListingId(url) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ URL EmlakJet
    // –§–æ—Ä–º–∞—Ç: https://www.emlakjet.com/ilan/–Ω–∞–∑–≤–∞–Ω–∏–µ-–æ–±—ä—è–≤–ª–µ–Ω–∏—è-17587498/
    const match = url.match(/-(\d+)\/?$/);
    if (match) {
      return match[1];
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –∏—â–µ–º —Ü–∏—Ñ—Ä—ã –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ URL
    const fallbackMatch = url.match(/(\d+)\/?$/);
    return fallbackMatch ? fallbackMatch[1] : null;
  }

  applyTranslations(data) {
    const translated = { ...data };
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const translatedSpecs = {};
    for (const [key, value] of Object.entries(translated.specifications || {})) {
      const translatedKey = this.translateField(key);
      const translatedValue = this.translateField(value);
      translatedSpecs[translatedKey] = translatedValue;
    }
    translated.specifications = translatedSpecs;

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    if (translated.features) {
      translated.features = translated.features.map(feature => this.translateField(feature));
    }

    return translated;
  }

  async handleCloudflare() {
    try {
      const title = await this.page.title();
      if (title.includes('Challenge') || title.includes('Checking') || title.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
        console.log(CONSTANTS.CHALK.yellow('üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Cloudflare, –æ–∂–∏–¥–∞–µ–º...'));
        
        let attempts = 0;
        while (attempts < 12) {
          await new Promise(resolve => setTimeout(resolve, 5000));
          const newTitle = await this.page.title();
          if (!newTitle.includes('Challenge') && !newTitle.includes('Checking') && !newTitle.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
            console.log(CONSTANTS.CHALK.green('‚úÖ Cloudflare –ø—Ä–æ–π–¥–µ–Ω!'));
            break;
          }
          attempts++;
        }
      }
    } catch (error) {
      console.log(CONSTANTS.CHALK.yellow('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...'));
    }
  }

  async step2_ParseDetailPages(limit = null, processedUrls = []) {
    console.log(CONSTANTS.CHALK.yellow('\nüìÑ –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü'));
    
    if (this.listingUrls.length === 0) {
      throw new Error('–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∞–ø 1');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL
    let filteredUrls = this.listingUrls;
    
    if (processedUrls.length > 0) {
      const initialCount = filteredUrls.length;
      filteredUrls = filteredUrls.filter(url => !processedUrls.includes(url));
      
      const skippedCount = initialCount - filteredUrls.length;
      
      console.log(CONSTANTS.CHALK.cyan(`ÔøΩÔøΩ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${initialCount}`));
      console.log(CONSTANTS.CHALK.yellow(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): ${skippedCount}`));
      console.log(CONSTANTS.CHALK.green(`üÜï –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${filteredUrls.length}`));
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const urlsToProcess = limit ? filteredUrls.slice(0, limit) : filteredUrls;
    const total = urlsToProcess.length;
    
    if (total === 0) {
      console.log(CONSTANTS.CHALK.yellow('‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'));
      return;
    }
    
    console.log(CONSTANTS.CHALK.blue(`üìã –ü–∞—Ä—Å–∏–º ${total} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`));
    
    for (let i = 0; i < total; i++) {
      const url = urlsToProcess[i];
      
      await this.parseDetailPage(url, i, total);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < total - 1) {
        console.log(CONSTANTS.CHALK.gray('‚è∞ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...'));
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }

    console.log(CONSTANTS.CHALK.green(`\n‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù`));
    console.log(CONSTANTS.CHALK.cyan(`üìä –£—Å–ø–µ—à–Ω–æ: ${this.detailResults.length}`));
    console.log(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`));
  }

  async saveResults() {
    // JSON —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –∏–¥—É—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    const summary = {
      timestamp: new Date().toISOString(),
      totalUrls: this.listingUrls.length,
      successful: this.detailResults.length,
      failed: this.errors.length,
      successRate: this.detailResults.length > 0 ? 
        ((this.detailResults.length / (this.detailResults.length + this.errors.length)) * 100).toFixed(2) + '%' : '0%'
    };

    console.log(CONSTANTS.CHALK.green('\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!'));
    console.log(CONSTANTS.CHALK.cyan(`üìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${summary.totalUrls}`));
    console.log(CONSTANTS.CHALK.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${summary.successful} (${summary.successRate})`));
    console.log(CONSTANTS.CHALK.red(`‚ùå –û—à–∏–±–æ–∫: ${summary.failed}`));

    return summary;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      console.log(CONSTANTS.CHALK.blue('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç'));
    }
  }

  static async run(limit = null) {
    const parser = new EmlakjetParser();

    try {
      await parser.init();
      await parser.step1_GetListingUrls();
      await parser.step2_ParseDetailPages(limit);
      await parser.saveResults();
      return parser.detailResults;
    } catch (error) {
      console.error(CONSTANTS.CHALK.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'), error.message);
      throw error;
    } finally {
      await parser.close();
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ 11

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
// (async () => {
//   console.log(CONSTANTS.CHALK.blue('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ EmlakJet...'));
//   try {
//     const results = await runEmlakjet(2);
//     results.forEach((result, index) => {
//       console.log(CONSTANTS.CHALK.cyan(`=== –û–ë–™–Ø–í–õ–ï–ù–ò–ï ${index + 1} ===`));
//       console.log(JSON.stringify(result, null, 2));
//     });
//   } catch (error) {
//     console.error(CONSTANTS.CHALK.red('‚ùå –û—à–∏–±–∫–∞:'), error.message);
//   }
// })(); 