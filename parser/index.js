#!/usr/bin/env node

import { HepsiemlakParser, runHepsiemlak } from './hepsiemlak-parser.js';
import { EmlakjetParser, runEmlakjet } from './emlakjet-parser.js';
import { ProductionScheduler } from './production-scheduler.js';
import database from './database.js';
import chalk from 'chalk';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

// –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É–¥—É—â–µ–º:
// import { SahibindenParser, runSahibinden } from './sahibinden-parser.js';
// import { HurriyetParser, runHurriyet } from './hurriyet-parser.js';
// import { ZingateParser, runZingate } from './zingate-parser.js';

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
const PARSERS = {
  hepsiemlak: {
    name: 'HepsEmlak.com',
    runner: runHepsiemlak,
    description: '–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ hepsiemlak.com'
  },
  emlakjet: {
    name: 'EmlakJet.com',
    runner: runEmlakjet,
    description: '–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ emlakjet.com'
  },
  // –í –±—É–¥—É—â–µ–º:
  // sahibinden: {
  //   name: 'Sahibinden.com', 
  //   runner: runSahibinden,
  //   description: '–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ sahibinden.com'
  // },
  // hurriyet: {
  //   name: 'HurriyetEmlak.com',
  //   runner: runHurriyet, 
  //   description: '–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ hurriyetemlak.com'
  // },
  // zingate: {
  //   name: 'Zingate.com',
  //   runner: runZingate,
  //   description: '–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ zingate.com'  
  // }
};

const argv = yargs(hideBin(process.argv))
  .command('list', '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã', {}, showParsersList)
  .command('run <parser>', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä', (yargs) => {
    return yargs
      .positional('parser', {
        describe: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ (hepsiemlak, sahibinden, hurriyet, zingate)',
        type: 'string'
      })
      .option('test', {
        alias: 't',
        describe: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)',
        type: 'boolean',
        default: false
      })
      .option('limit', {
        alias: 'l',
        describe: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        type: 'number'
      });
  }, runSingleParser)
  .command('run-all', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã', (yargs) => {
    return yargs
      .option('test', {
        alias: 't',
        describe: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)',
        type: 'boolean',
        default: false
      })
      .option('limit', {
        alias: 'l',
        describe: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        type: 'number'
      });
  }, runAllParsers)
  .command('production', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', (yargs) => {
    return yargs
      .option('config', {
        alias: 'c',
        describe: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î',
        type: 'string'
      })
      .option('test-run', {
        describe: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞',
        type: 'boolean',
        default: false
      });
  }, runProduction)
  .command('production-force <parser>', '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ', (yargs) => {
    return yargs
      .positional('parser', {
        describe: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞',
        type: 'string'
      })
      .option('config', {
        alias: 'c',
        describe: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î',
        type: 'string'
      });
  }, forceProductionRun)
  .command('stats', '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤', (yargs) => {
    return yargs
      .option('config', {
        alias: 'c',
        describe: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î',
        type: 'string'
      });
  }, showStats)
  .option('verbose', {
    alias: 'v',
    describe: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥',
    type: 'boolean',
    default: false
  })
  .help()
  .alias('help', 'h')
  .demandCommand()
  .strict()
  .argv;

// –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
function showParsersList() {
  console.log(chalk.blue('\nüöÄ –î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–°–ï–†–´:\n'));
  
  Object.entries(PARSERS).forEach(([key, parser]) => {
    console.log(chalk.white(`üîπ ${key}:`));
    console.log(`   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${parser.name}`);
    console.log(`   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${parser.description}`);
    console.log();
  });
  
  console.log(chalk.cyan('üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:'));
  console.log(chalk.gray('node index.js run hepsiemlak --test'));
  console.log(chalk.gray('node index.js run hepsiemlak --limit 10'));
  console.log(chalk.gray('node index.js run-all --test'));
  console.log(chalk.gray('node index.js production'));
  console.log(chalk.gray('node index.js production-force hepsiemlak'));
  console.log(chalk.gray('node index.js stats'));
  console.log();
}

async function runSingleParser(argv) {
  const { parser: parserName, test, limit } = argv;
  
  const parser = PARSERS[parserName];
  if (!parser) {
    console.error(chalk.red(`‚ùå –ü–∞—Ä—Å–µ—Ä "${parserName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`));
    console.log(chalk.cyan('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:'), Object.keys(PARSERS).join(', '));
    process.exit(1);
  }

  console.log(chalk.blue(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞: ${parser.name}`));
  
  const testLimit = test ? 3 : (limit || null);
  if (testLimit) {
    console.log(chalk.yellow(`üß™ –†–µ–∂–∏–º: ${test ? '—Ç–µ—Å—Ç–æ–≤—ã–π' : '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π'} (${testLimit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)`));
  }

  try {
    const results = await parser.runner(testLimit);
    
    console.log(chalk.green(`\n‚úÖ ${parser.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`));
    console.log(chalk.cyan(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results?.length || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
    
  } catch (error) {
    console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${parser.name}:`), error.message);
    process.exit(1);
  }
}

async function runAllParsers(argv) {
  const { test, limit } = argv;
  
  console.log(chalk.blue('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤...\n'));
  
  const testLimit = test ? 3 : (limit || null);
  const results = {};
  
  for (const [parserName, parser] of Object.entries(PARSERS)) {
    console.log(chalk.blue(`\n‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫: ${parser.name}`));
    
    try {
      const result = await parser.runner(testLimit);
      results[parserName] = {
        success: true,
        count: result?.length || 0,
        data: result
      };
      
      console.log(chalk.green(`‚úÖ ${parser.name}: ${result?.length || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
      
    } catch (error) {
      results[parserName] = {
        success: false,
        error: error.message
      };
      
      console.error(chalk.red(`‚ùå ${parser.name}: ${error.message}`));
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log(chalk.blue('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:'));
  
  let totalSuccess = 0;
  let totalFailed = 0;
  let totalCount = 0;
  
  Object.entries(results).forEach(([parserName, result]) => {
    const parser = PARSERS[parserName];
    
    if (result.success) {
      console.log(chalk.green(`‚úÖ ${parser.name}: ${result.count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
      totalSuccess++;
      totalCount += result.count;
    } else {
      console.log(chalk.red(`‚ùå ${parser.name}: ${result.error}`));
      totalFailed++;
    }
  });
  
  console.log(chalk.cyan(`\nüéâ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`));
  console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${totalSuccess} –ø–∞—Ä—Å–µ—Ä–æ–≤`));
  console.log(chalk.red(`‚ùå –û—à–∏–±–æ–∫: ${totalFailed} –ø–∞—Ä—Å–µ—Ä–æ–≤`));
}

async function runProduction(argv) {
  const { config, testRun } = argv;
  
  console.log(chalk.blue('üöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–ê–ö–®–ù –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê'));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
  let dbConfig = {};
  if (config) {
    try {
      dbConfig = await import(config);
      console.log(chalk.green(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${config}`));
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`));
      process.exit(1);
    }
  }

  const scheduler = new ProductionScheduler(dbConfig);
  
  try {
    await scheduler.init();
    
    if (testRun) {
      console.log(chalk.yellow('üß™ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö'));
      await scheduler.forceRun('hepsiemlak');
      await scheduler.shutdown();
    } else {
      console.log(chalk.green('üîÑ –ó–ê–ü–£–°–ö –í –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú–ï'));
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
      process.on('SIGINT', async () => {
        console.log(chalk.yellow('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...'));
        await scheduler.shutdown();
        process.exit(0);
      });
      
      process.on('SIGTERM', async () => {
        console.log(chalk.yellow('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...'));
        await scheduler.shutdown();
        process.exit(0);
      });
      
      scheduler.start();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      setInterval(() => {
        const stats = scheduler.getStats();
        console.log(chalk.blue('\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:'));
        console.log(`üîÑ –ê–∫—Ç–∏–≤–µ–Ω: ${stats.isRunning ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`üìã –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ${stats.currentJob || '–ù–µ—Ç'}`);
        console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: ${stats.totalRuns}`);
        console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${stats.lastRunTime ? stats.lastRunTime.toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
      }, 30 * 60 * 1000);
      
      console.log(chalk.cyan('\nüëÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n'));
    }
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:'), error.message);
    await scheduler.shutdown();
    process.exit(1);
  }
}

async function forceProductionRun(argv) {
  const { parser: parserName, config } = argv;
  
  if (!PARSERS[parserName]) {
    console.error(chalk.red(`‚ùå –ü–∞—Ä—Å–µ—Ä "${parserName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`));
    process.exit(1);
  }

  console.log(chalk.blue(`üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö: ${PARSERS[parserName].name}`));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
  let dbConfig = {};
  if (config) {
    try {
      dbConfig = await import(config);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`));
      process.exit(1);
    }
  }

  const scheduler = new ProductionScheduler(dbConfig);
  
  try {
    await scheduler.init();
    await scheduler.forceRun(parserName);
    await scheduler.shutdown();
    
    console.log(chalk.green('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:'), error.message);
    await scheduler.shutdown();
    process.exit(1);
  }
}

async function showStats(argv) {
  const { config } = argv;
  
  console.log(chalk.blue('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ï–†–û–í'));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
  let dbConfig = {};
  if (config) {
    try {
      dbConfig = await import(config);
    } catch (error) {
      console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`));
      process.exit(1);
    }
  }

      const db = database;
  
  try {
    await db.connect();
    
    for (const [parserName, parser] of Object.entries(PARSERS)) {
      console.log(chalk.white(`\nüîπ ${parser.name}:`));
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –ë–î
        const [parserStats] = await db.database.getParserStats(parserName);
        const [listingStats] = await db.database.getListingsStats(parserName);
        
        console.log(`   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${listingStats?.total_listings || 0}`);
        console.log(`   üîó –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ URL: ${parserStats?.total_processed || 0}`);
        console.log(`   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${listingStats?.avg_price ? Math.round(listingStats.avg_price) + ' ‚Ç∫' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: ${listingStats?.last_parsed ? new Date(listingStats.last_parsed).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
        console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${parserStats?.last_updated ? new Date(parserStats.last_updated).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
      } catch (error) {
        console.log(chalk.red(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`));
      }
    }
    
    await db.close();
    
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:'), error.message);
    await db.close();
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
export {
  HepsiemlakParser,
  runHepsiemlak,
  PARSERS,
  ProductionScheduler,
  database
}; 