import config from './config.js';
import database from './database/index.js';
import https from 'https';

class NotificationService {
  constructor() {
    this.isRunning = false;
    this.checkInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

    async sendTelegramMessage(chatId, message) {
    return new Promise((resolve, reject) => {
      const data = JSON.stringify({
        chat_id: chatId,
        text: message
      });

      const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: `/bot${config.telegram.token}/sendMessage`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': data.length
        }
      };

      const req = https.request(options, (res) => {
        let responseData = '';
        res.on('data', (chunk) => {
          responseData += chunk;
        });
        res.on('end', () => {
          if (res.statusCode === 200) {
            resolve(JSON.parse(responseData));
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.write(data);
      req.end();
    });
  }

  async checkAndSendNotifications() {
    try {
      const subscribedUsers = await database.getSubscribedUsers();
      
      for (const user of subscribedUsers) {
        await this.sendNotificationsToUser(user);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  cleanText(text) {
    if (!text) return 'Not specified';
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç—É—Ä–µ—Ü–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–ª–æ–≤
    let cleaned = text
      .replace(/√ß/g, 'c').replace(/√á/g, 'C')
      .replace(/ƒü/g, 'g').replace(/ƒû/g, 'G')
      .replace(/ƒ±/g, 'i').replace(/I/g, 'I')
      .replace(/ƒ∞/g, 'I').replace(/i/g, 'i')
      .replace(/√∂/g, 'o').replace(/√ñ/g, 'O')
      .replace(/≈ü/g, 's').replace(/≈û/g, 'S')
      .replace(/√º/g, 'u').replace(/√ú/g, 'U')
      // –ó–∞–º–µ–Ω—è–µ–º —Ç—É—Ä–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
      .replace(/Konyaalti/g, 'Konyaalti')
      .replace(/Dubleks/g, 'Duplex')
      .replace(/Temmuz/g, 'July')
      .replace(/Kat/g, 'Floor')
      .replace(/Mahallesi/g, 'District')
      .replace(/Antalya/g, 'Antalya')
      .replace(/[^\x00-\x7F]/g, '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
      .trim();
    
    return cleaned || 'Not specified';
  }

  async sendNotificationsToUser(user) {
    try {
      const { user_id, last_notification_sent_at } = user;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–ª–∏ —á–∞—Å –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏)
      const lastSent = last_notification_sent_at 
        ? new Date(last_notification_sent_at)
        : new Date(Date.now() - 60 * 60 * 1000); // —á–∞—Å –Ω–∞–∑–∞–¥
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const newListings = await database.getNewListingsSince(lastSent);
      
      if (newListings.length === 0) {
        return; // –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
      for (const listing of newListings) {
        
        const data = typeof listing.data === 'string' 
          ? JSON.parse(listing.data) 
          : listing.data;
        
        const specs = data.specifications || {};
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∞–π—Ç–∞
        let source_emoji = 'üèòÔ∏è';
        let displayName = listing.site_name;
        
        switch(listing.site_name) {
          case 'hepsiemlak':
            source_emoji = 'üè†';
            displayName = 'HEPSEMLAK';
            break;
          case 'emlakjet':
            source_emoji = 'üè°';
            displayName = 'EMLAKJET';
            break;
          case 'sahibinden':
            source_emoji = 'üè¢';
            displayName = 'SAHIBINDEN';
            break;
          case 'hurriyet':
            source_emoji = 'üì∞';
            displayName = 'HURRIYET EMLAK';
            break;
          case 'zingate':
            source_emoji = 'üîë';
            displayName = 'ZINGATE';
            break;
          default:
            source_emoji = 'üèòÔ∏è';
            displayName = listing.site_name.toUpperCase();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const get = (key) => this.cleanText(String(specs[key] || '‚Äî'));
        let message = `${source_emoji} ${get('–ù–∞–∑–≤–∞–Ω–∏–µ') || displayName}\n`;
        message += `–¶–µ–Ω–∞: ${get('–¶–µ–Ω–∞')}\n`;
        message += `–ü—Ä–æ–≤–∏–Ω—Ü–∏—è: ${get('–ü—Ä–æ–≤–∏–Ω—Ü–∏—è')}\n`;
        message += `–¢–∏–ø: ${get('–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')}\n`;
        message += `–ü–ª–æ—â–∞–¥—å: ${get('–º¬≤ (–Ω–µ—Ç—Ç–æ)')} –Ω–µ—Ç—Ç–æ / ${get('–º¬≤ (–±—Ä—É—Ç—Ç–æ)')} –±—Ä—É—Ç—Ç–æ\n`;
        message += `–ö–æ–º–Ω–∞—Ç: ${get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç')}\n`;
        message += `–≠—Ç–∞–∂: ${get('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞')} –∏–∑ ${get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π')}\n`;
        message += `–í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è: ${get('–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç')}\n`;
        message += `–ú–µ–±–ª–∏—Ä–æ–≤–∫–∞: ${get('–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–æ')}\n`;
        message += `–°—Ç–∞—Ç—É—Å: ${get('–°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')}\n`;
        message += `–î–∞—Ç–∞: ${get('–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')}\n`;
        message += `ID: ${listing.id}`;

        try {
          await this.sendTelegramMessage(user_id, message);
          if (listing.url) {
            const linkMessage = `–°—Å—ã–ª–∫–∞: ${listing.url}`;
            await this.sendTelegramMessage(user_id, linkMessage);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error.message);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      await database.updateLastNotificationSent(user_id);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error.message);
    }
  }

  start() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    console.log('üîî –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.intervalId = setInterval(() => {
      this.checkAndSendNotifications();
    }, this.checkInterval);
    
    // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setTimeout(() => {
      this.checkAndSendNotifications();
    }, 5000); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  }

  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
    console.log('üîî –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await database.init();
    
    // –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationService = new NotificationService();
    notificationService.start();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.once('SIGINT', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
      notificationService.stop();
      process.exit(0);
    });
    
    process.once('SIGTERM', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
      notificationService.stop();
      process.exit(0);
    });
    
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
    process.exit(1);
  }
}

main(); 