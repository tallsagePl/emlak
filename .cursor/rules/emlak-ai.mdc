---
description: 
globs: 
alwaysApply: false
---
# Правила разработки проекта Emlak

## 1. Архитектура проекта

### 1.1 Структура директорий
```
emlak/
├── bot/                  # Telegram бот
├── parser/              # Парсеры сайтов
├── database/            # Модуль БД
├── scripts/             # Скрипты
├── docker/              # Docker файлы
└── config.js            # Общая конфигурация
```

### 1.2 Модульность
- Каждый компонент в отдельной директории
- Независимые package.json для модулей
- Общая конфигурация в config.js
- Переиспользуемые утилиты в utils/

## 2. Стиль кодирования

### 2.1 Именование
- camelCase для переменных и функций
- PascalCase для классов и компонентов
- UPPER_SNAKE_CASE для констант
- Префикс is/has для булевых переменных

### 2.2 Форматирование
```javascript
// Правильно
async function processData(data) {
  try {
    const result = await validateData(data);
    return result;
  } catch (error) {
    logger.error('Ошибка обработки:', error);
    throw error;
  }
}

// Неправильно
async function process_data(data){
  try{
    let result=await validateData(data)
    return result
  }catch(error){
    console.log(error)
    throw error
  }
}
```

### 2.3 Документация
- JSDoc для публичных методов
- Описание параметров и возвращаемых значений
- Примеры использования в сложных случаях
- Комментарии на русском языке

## 3. База данных

### 3.1 Именование таблиц
- Существительные во множественном числе
- Нижний регистр с подчеркиваниями
- Префикс для связанных таблиц

### 3.2 Структура таблиц
```sql
-- Обязательные поля
id SERIAL PRIMARY KEY
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

-- Индексы
CREATE INDEX idx_table_field ON table(field);
```

### 3.3 Миграции
- Версионирование миграций
- Откат изменений (down migration)
- Транзакционность операций
- Проверка целостности данных

## 4. Парсеры

### 4.1 Структура парсера
```javascript
class SiteParser {
  constructor() {
    this.browser = null;
    this.page = null;
  }

  async init() {
    // Инициализация браузера
  }

  async parse() {
    // Логика парсинга
  }

  async cleanup() {
    // Освобождение ресурсов
  }
}
```

### 4.2 Обработка ошибок
- Специфичные классы ошибок
- Логирование деталей
- Повторные попытки
- Graceful shutdown

### 4.3 Производительность
- Параллельный парсинг
- Кеширование результатов
- Управление памятью
- Мониторинг ресурсов

## 5. Telegram бот

### 5.1 Структура сцен
```javascript
const scene = new BaseScene('sceneName');
scene.enter(ctx => {/* ... */});
scene.leave(ctx => {/* ... */});
scene.command('help', ctx => {/* ... */});
```

### 5.2 Локализация
- Поддержка ru/en/tr
- Динамическая смена языка
- Форматирование сообщений
- Контекстные переводы

### 5.3 Состояние
- Сессии пользователей
- Кеширование данных
- Очистка старых сессий
- Восстановление состояния

## 6. Docker

### 6.1 Контейнеры
```dockerfile
# Оптимизация образов
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN yarn install --frozen-lockfile
COPY . .
```

### 6.2 Volumes
- Постоянное хранение данных
- Кеширование зависимостей
- Логи приложения
- Конфигурационные файлы

### 6.3 Сеть
- Внутренняя сеть для сервисов
- Проброс портов
- Healthcheck endpoints
- SSL/TLS настройки

## 7. Безопасность

### 7.1 Переменные окружения
```javascript
// config.js
const config = {
  database: {
    password: process.env.DB_PASSWORD
  },
  bot: {
    token: process.env.BOT_TOKEN
  }
};
```

### 7.2 Доступ к данным
- Валидация входных данных
- Санитизация SQL запросов
- Ограничение доступа к API
- Логирование действий

### 7.3 Защита парсера
- Ротация User-Agent
- Прокси-серверы
- Задержки между запросами
- Обход защиты Cloudflare

## 8. Логирование

### 8.1 Уровни логов
```javascript
logger.error('Критическая ошибка');
logger.warn('Предупреждение');
logger.info('Информация');
logger.debug('Отладка');
```

### 8.2 Формат
- Временная метка
- Уровень важности
- Контекст операции
- Стек ошибки

### 8.3 Хранение
- Ротация логов
- Архивация старых логов
- Мониторинг размера
- Очистка устаревших

## 9. Тестирование

### 9.1 Модульные тесты
```javascript
describe('Parser', () => {
  it('should parse listing', async () => {
    // Тест
  });
});
```

### 9.2 Интеграционные тесты
- Взаимодействие сервисов
- Проверка API
- Тестовая база данных
- Моки внешних сервисов

### 9.3 E2E тесты
- Сценарии бота
- Проверка парсинга
- Нагрузочное тестирование
- Мониторинг производительности

## 10. CI/CD

### 10.1 Проверки
- Линтинг кода
- Форматирование
- Тесты
- Сборка Docker образов

### 10.2 Деплой
- Staging среда
- Production релизы
- Откат изменений
- Мониторинг после деплоя

### 10.3 Мониторинг
- Метрики сервисов
- Алерты при ошибках
- Графики нагрузки
- Отчеты о работе

## 11. Работа с Git

### 11.1 Ветки
- main: основная ветка
- develop: разработка
- feature/*: новый функционал
- hotfix/*: срочные исправления

### 11.2 Коммиты
```
feat: добавлен новый парсер
fix: исправлена ошибка в боте
docs: обновлена документация
refactor: оптимизация парсера
```

### 11.3 Code Review
- Проверка стиля
- Тесты пройдены
- Документация обновлена
- Нет конфликтов

## 12. Зависимости

### 12.1 Package.json
```json
{
  "dependencies": {
    "telegraf": "^4.16.3",
    "pg": "^8.16.0"
  }
}
```

### 12.2 Версионирование
- Фиксированные версии
- Yarn.lock в репозитории
- Регулярные обновления
- Проверка уязвимостей

### 12.3 Оптимизация
- Минимум зависимостей
- Общие пакеты в корне
- Очистка неиспользуемых
- Аудит безопасности
