require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { I18n } = require('@grammyjs/i18n');
const db = require('./db');

const bot = new Telegraf(process.env.BOT_TOKEN);
const sessions = new Map();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userLocales = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18n
const i18n = new I18n({
  defaultLocale: 'en',
  directory: 'locales',
  useSession: true,
  locales: ['ru', 'en', 'tr'],
  localeNegotiator: (ctx) =>
    userLocales.get(ctx.from?.id) ?? ctx.from?.language_code ?? 'en',
});

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è i18n
bot.use(i18n.middleware());

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  ctx.reply(ctx.t('error'));
});

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  const start = new Date();
  await next();
  const ms = new Date() - start;
});

function escapeMarkdown(text) {
  if (!text) return '';
  return text.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, '\\$&');
}

function showStartMenu(ctx) {
  return ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('add'), 'add')],
    [Markup.button.callback(ctx.t('view'), 'view')],
    [Markup.button.callback(ctx.t('change-lang'), 'change_lang')]
  ]));
}

// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω: /start –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
bot.start((ctx) => {
  ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('add'), 'add')],
    [Markup.button.callback(ctx.t('view'), 'view')],
    [Markup.button.callback(ctx.t('change-lang'), 'change_lang')]
  ]));
});

bot.command('view', (ctx) => {
  sessions.set(ctx.from.id, { step: 'view_menu', filters: [], offset: 0 });
  ctx.reply(ctx.t('view-menu-title'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('view-all'), 'view_all')],
    [Markup.button.callback(ctx.t('view-filtered'), 'view_filtered')]
  ]));
});

bot.action('view', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  sessions.set(ctx.from.id, { step: 'view_menu', filters: [], offset: 0 });
  await ctx.reply(ctx.t('view-menu-title'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('view-all'), 'view_all')],
    [Markup.button.callback(ctx.t('view-filtered'), 'view_filtered')]
  ]));
});

// ===== –í–°–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô =====
bot.action('view_all', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const session = sessions.get(ctx.from.id) || {};
  if (!session.shownMessages) session.shownMessages = [];
  sessions.set(ctx.from.id, session);

  // –ü–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (session.shownMessages && session.shownMessages.length) {
    for (const msgId of session.shownMessages) {
      try {
        await ctx.deleteMessage(msgId);
      } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è */ }
    }
    session.shownMessages = [];
  }

  const offset = 0;
  const result = await db.query(
    `SELECT * FROM listings ORDER BY created_at DESC LIMIT 10 OFFSET $1`,
    [offset]
  );

  if (!result.rows.length) {
    await ctx.reply(ctx.t('listing-empty'), Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('back'), 'back_to_menu')]
    ]));
    return;
  }

  for (const row of result.rows) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–∞
    let addressText = '';
    if (row.address) {
      addressText = `üìç ${escapeMarkdown(row.address)}\n`;
    } else if (row.location) {
      addressText = `üìç ${escapeMarkdown(ctx.t('location-geo'))}\n`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    let message =
      `üè° *${escapeMarkdown(row.property_type)}*, ${escapeMarkdown(row.rooms)}, ${escapeMarkdown(row.price)}\n` +
      addressText +
      `üìù ${escapeMarkdown(row.description)}`;

    const sent = await ctx.replyWithMarkdownV2(message);
    session.shownMessages.push(sent.message_id);

    // –ï—Å–ª–∏ –µ—Å—Ç—å location ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ—Ç–æ—á–∫—É
    if (row.location) {
      try {
        const loc = JSON.parse(row.location);
        if (loc.latitude && loc.longitude) {
          const geoMsg = await ctx.replyWithLocation(loc.latitude, loc.longitude);
          session.shownMessages.push(geoMsg.message_id);
        }
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }
  }

  // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
  let buttons = [];
  if (offset > 0) {
    buttons.push(Markup.button.callback(ctx.t('listing-prev'), `view_all_${offset - 10}`));
  }
  if (result.rows.length === 10) {
    buttons.push(Markup.button.callback(ctx.t('listing-next'), `view_all_${offset + 10}`));
  }
  if (buttons.length) {
    const btnMsg = await ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([buttons, [Markup.button.callback(ctx.t('back'), 'back_to_menu')]]));
    session.shownMessages.push(btnMsg.message_id);
  } else {
    const btnMsg = await ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([[Markup.button.callback(ctx.t('back'), 'back_to_menu')]]));
    session.shownMessages.push(btnMsg.message_id);
  }
});

// –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
bot.action(/view_all_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const session = sessions.get(ctx.from.id) || {};
  if (!session.shownMessages) session.shownMessages = [];
  sessions.set(ctx.from.id, session);

  // –ü–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (session.shownMessages && session.shownMessages.length) {
    for (const msgId of session.shownMessages) {
      try {
        await ctx.deleteMessage(msgId);
      } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è */ }
    }
    session.shownMessages = [];
  }

  const offset = parseInt(ctx.match[1]);
  const result = await db.query(
    `SELECT * FROM listings ORDER BY created_at DESC LIMIT 10 OFFSET $1`,
    [offset]
  );

  if (!result.rows.length) {
    await ctx.reply(ctx.t('listing-empty'), Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('back'), 'back_to_menu')]
    ]));
    return;
  }

  for (const row of result.rows) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–∞
    let addressText = '';
    if (row.address) {
      addressText = `üìç ${escapeMarkdown(row.address)}\n`;
    } else if (row.location) {
      addressText = `üìç ${escapeMarkdown(ctx.t('location-geo'))}\n`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    let message =
      `üè° *${escapeMarkdown(row.property_type)}*, ${escapeMarkdown(row.rooms)}, ${escapeMarkdown(row.price)}\n` +
      addressText +
      `üìù ${escapeMarkdown(row.description)}`;

    const sent = await ctx.replyWithMarkdownV2(message);
    session.shownMessages.push(sent.message_id);

    // –ï—Å–ª–∏ –µ—Å—Ç—å location ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ—Ç–æ—á–∫—É
    if (row.location) {
      try {
        const loc = JSON.parse(row.location);
        if (loc.latitude && loc.longitude) {
          const geoMsg = await ctx.replyWithLocation(loc.latitude, loc.longitude);
          session.shownMessages.push(geoMsg.message_id);
        }
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }
  }

  // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
  let buttons = [];
  if (offset > 0) {
    buttons.push(Markup.button.callback(ctx.t('listing-prev'), `view_all_${offset - 10}`));
  }
  if (result.rows.length === 10) {
    buttons.push(Markup.button.callback(ctx.t('listing-next'), `view_all_${offset + 10}`));
  }
  if (buttons.length) {
    const btnMsg = await ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([buttons, [Markup.button.callback(ctx.t('back'), 'back_to_menu')]]));
    session.shownMessages.push(btnMsg.message_id);
  } else {
    const btnMsg = await ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([[Markup.button.callback(ctx.t('back'), 'back_to_menu')]]));
    session.shownMessages.push(btnMsg.message_id);
  }
});

// ===== –§–ò–õ–¨–¢–†–´ =====
bot.action('view_filtered', async (ctx) => {
  const session = sessions.get(ctx.from.id) || { filters: [], offset: 0 };
  session.step = 'filter_menu';
  sessions.set(ctx.from.id, session);

  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const msg = await ctx.reply(
    ctx.t('filter-added') + '\n' + ctx.t('filter-count', { count: session.filters.length }),
    Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('filter-show'), 'show_filtered')],
      [Markup.button.callback(ctx.t('filter-add'), 'add_filter')]
    ])
  );
  session.shownMessages = session.shownMessages || [];
  session.shownMessages.push(msg.message_id);
});

bot.action('add_filter', async (ctx) => {
  const session = sessions.get(ctx.from.id);
  if (!session) return;
  session.step = 'choose_filter';

  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.reply(ctx.t('filter-type-title'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('filter-type'), 'filter_type')],
    [Markup.button.callback(ctx.t('filter-currency'), 'filter_currency')],
    [Markup.button.callback(ctx.t('filter-rooms'), 'filter_rooms')],
    [Markup.button.callback(ctx.t('filter-price'), 'filter_price')]
  ]));
});

bot.action('filter_type', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.reply(ctx.t('filter-type-title'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('property-rent'), 'filter_type_set_–ê—Ä–µ–Ω–¥–∞')],
    [Markup.button.callback(ctx.t('property-sale'), 'filter_type_set_–ü—Ä–æ–¥–∞–∂–∞')]
  ]));
});

bot.action('filter_currency', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.reply(ctx.t('filter-type-title'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('currency-usd'), 'filter_currency_set_USD'), Markup.button.callback(ctx.t('currency-try'), 'filter_currency_set_TRY')],
    [Markup.button.callback(ctx.t('currency-eur'), 'filter_currency_set_EUR'), Markup.button.callback(ctx.t('currency-rub'), 'filter_currency_set_RUB')]
  ]));
});

bot.action('filter_rooms', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.reply(ctx.t('filter-type-title'), Markup.inlineKeyboard([
    [ctx.t('rooms-1-0'), ctx.t('rooms-1-1'), ctx.t('rooms-2-1'), ctx.t('rooms-3-1'), ctx.t('rooms-4-1'), ctx.t('rooms-other')].map(val => 
      Markup.button.callback(val, 'filter_rooms_set_' + val))
  ]));
});

bot.action('filter_price', async (ctx) => {
  const session = sessions.get(ctx.from.id);
  session.step = 'price_from';
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.reply(ctx.t('price-min'));
});

bot.on('text', async (ctx) => {
  const session = sessions.get(ctx.from.id);
  if (!session || !session.step) return;

  // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ===
  if (session.step === 'add_price') {
    const value = ctx.message.text.trim();
    if (!/^\d+(\.\d+)?$/.test(value)) {
      return ctx.reply(ctx.t('price-only-number'));
    }
    session.data.price = value + ' ' + session.data.currency;
    session.step = 'add_rooms';
    return ctx.reply(ctx.t('rooms-choose'), Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('rooms-1-0'), 'add_rooms_1+0'), Markup.button.callback(ctx.t('rooms-1-1'), 'add_rooms_1+1')],
      [Markup.button.callback(ctx.t('rooms-2-1'), 'add_rooms_2+1'), Markup.button.callback(ctx.t('rooms-3-1'), 'add_rooms_3+1')],
      [Markup.button.callback(ctx.t('rooms-4-1'), 'add_rooms_4+1'), Markup.button.callback(ctx.t('rooms-other'), 'add_rooms_–î—Ä—É–≥–æ–µ')]
    ]));
  }
  if (session.step === 'add_rooms_text') {
    session.data.rooms = ctx.message.text.trim();
    session.step = 'add_location';
    return ctx.reply(ctx.t('location-send'));
  }
  if (session.step === 'add_location') {
    session.data.location = ctx.message.location;
    session.data.address = null;
    session.step = 'add_address';
    await ctx.reply(ctx.t('location-address'));
    return;
  }
  if (session.step === 'add_address') {
    const text = ctx.message.text.trim();
    if (text !== '-' && text !== ctx.t('location-skip')) {
      session.data.address = text;
    } else {
      session.data.address = null;
    }
    session.step = 'add_description';
    return ctx.reply(ctx.t('description-enter'));
  }
  if (session.step === 'add_description') {
    session.data.description = ctx.message.text.trim();
    await db.query(
      `INSERT INTO listings (owner_id, property_type, rooms, price, location, address, description) VALUES ($1, $2, $3, $4, $5, $6, $7)`,
      [
        ctx.from.id, // owner_id
        session.data.property_type,
        session.data.rooms,
        session.data.price,
        session.data.location ? JSON.stringify(session.data.location) : null,
        session.data.address,
        session.data.description
      ]
    );
    sessions.delete(ctx.from.id);
    await ctx.reply(ctx.t('listing-success'));
    return showStartMenu(ctx);
  }

  // === –§–∏–ª—å—Ç—Ä—ã ===
  if (session.step === 'price_from') {
    session.filters.push({ type: 'price_from', value: Number(ctx.message.text.trim()) });
    session.step = 'price_to';
    return ctx.reply(ctx.t('price-max'));
  }
  if (session.step === 'price_to') {
    session.filters.push({ type: 'price_to', value: Number(ctx.message.text.trim()) });
    session.step = 'filter_menu';

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    if (session.shownMessages && session.shownMessages.length) {
      for (const msgId of session.shownMessages) {
        try { await ctx.deleteMessage(msgId); } catch (e) {}
      }
      session.shownMessages = [];
    }

    const msg = await ctx.reply(
      ctx.t('filter-added') + '\n' + ctx.t('filter-count', { count: session.filters.length }),
      Markup.inlineKeyboard([
        [Markup.button.callback(ctx.t('filter-show'), 'show_filtered')],
        [Markup.button.callback(ctx.t('filter-add'), 'add_filter')]
      ])
    );
    session.shownMessages = session.shownMessages || [];
    session.shownMessages.push(msg.message_id);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ—Å–ª–µ –≥–µ–æ—Ç–æ—á–∫–∏
  if (session.step === 'add_location' && ctx.message.text) {
    session.data.location = null;
    session.data.address = ctx.message.text.trim();
    session.step = 'add_description';
    return ctx.reply(ctx.t('description-enter'));
  }
});

bot.on('location', async (ctx) => {
  const session = sessions.get(ctx.from.id);
  if (!session || session.step !== 'add_location') return;
  session.data.location = ctx.message.location;
  session.data.address = null;
  session.step = 'add_address';
  sessions.set(ctx.from.id, session);
  await ctx.reply(ctx.t('location-address'));
});

bot.action(/filter_type_set_(.+)/, async (ctx) => {
  const session = sessions.get(ctx.from.id);
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
  session.filters = (session.filters || []).filter(f => f.type !== 'property_type');
  session.filters.push({ type: 'property_type', value: ctx.match[1] });
  session.step = 'filter_menu';
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const msg = await ctx.reply(
    ctx.t('filter-added') + '\n' + ctx.t('filter-count', { count: session.filters.length }),
    Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('filter-show'), 'show_filtered')],
      [Markup.button.callback(ctx.t('filter-add'), 'add_filter')]
    ])
  );
  session.shownMessages = session.shownMessages || [];
  session.shownMessages.push(msg.message_id);
});

bot.action(/filter_currency_set_(.+)/, async (ctx) => {
  const session = sessions.get(ctx.from.id);
  session.filters = session.filters || [];
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
  if (!session.filters.some(f => f.type === 'currency' && f.value === ctx.match[1])) {
    session.filters.push({ type: 'currency', value: ctx.match[1] });
  }
  session.step = 'filter_menu';
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const msg = await ctx.reply(
    ctx.t('filter-added') + '\n' + ctx.t('filter-count', { count: session.filters.length }),
    Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('filter-show'), 'show_filtered')],
      [Markup.button.callback(ctx.t('filter-add'), 'add_filter')]
    ])
  );
  session.shownMessages = session.shownMessages || [];
  session.shownMessages.push(msg.message_id);
});

bot.action(/filter_rooms_set_(.+)/, async (ctx) => {
  const session = sessions.get(ctx.from.id);
  session.filters.push({ type: 'rooms', value: ctx.match[1] });
  session.step = 'filter_menu';
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const msg = await ctx.reply(
    ctx.t('filter-added') + '\n' + ctx.t('filter-count', { count: session.filters.length }),
    Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('filter-show'), 'show_filtered')],
      [Markup.button.callback(ctx.t('filter-add'), 'add_filter')]
    ])
  );
  session.shownMessages = session.shownMessages || [];
  session.shownMessages.push(msg.message_id);
});

bot.action('show_filtered', async (ctx) => {
  const session = sessions.get(ctx.from.id) || {};
  session.offset = 0;
  sessions.set(ctx.from.id, session);
  await showFilteredListings(ctx, 0);
});

bot.action(/show_filtered_(\d+)/, async (ctx) => {
  const session = sessions.get(ctx.from.id) || {};
  const offset = parseInt(ctx.match[1]);
  session.offset = offset;
  sessions.set(ctx.from.id, session);
  await showFilteredListings(ctx, offset);
});

async function showFilteredListings(ctx, offset = 0) {
  offset = Number(offset) || 0;
  const session = sessions.get(ctx.from.id) || {};
  if (!session.shownMessages) session.shownMessages = [];
  sessions.set(ctx.from.id, session);
  const filters = session.filters || [];
  let where = [];
  let params = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –∏ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
  const currencyFilters = filters.filter(f => f.type === 'currency');
  const roomsFilters = filters.filter(f => f.type === 'rooms');
  const otherFilters = filters.filter(f => f.type !== 'currency' && f.type !== 'rooms');

  if (currencyFilters.length) {
    const currencyConds = currencyFilters.map((f, idx) => {
      params.push(`%${f.value}%`);
      return `price ILIKE $${params.length}`;
    });
    where.push('(' + currencyConds.join(' OR ') + ')');
  }

  if (roomsFilters.length) {
    const roomsConds = roomsFilters.map((f, idx) => {
      params.push(f.value);
      return `rooms = $${params.length}`;
    });
    where.push('(' + roomsConds.join(' OR ') + ')');
  }

  otherFilters.forEach((f) => {
    switch (f.type) {
      case 'property_type':
        where.push(`property_type = $${params.length + 1}`);
        params.push(f.value);
        break;
      case 'price_from':
        where.push(`CAST(split_part(price, ' ', 1) AS NUMERIC) >= $${params.length + 1}`);
        params.push(f.value);
        break;
      case 'price_to':
        where.push(`CAST(split_part(price, ' ', 1) AS NUMERIC) <= $${params.length + 1}`);
        params.push(f.value);
        break;
    }
  });

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (session.shownMessages && session.shownMessages.length) {
    for (const msgId of session.shownMessages) {
      try { await ctx.deleteMessage(msgId); } catch (e) {}
    }
    session.shownMessages = [];
  }

  const whereClause = where.length ? `WHERE ${where.join(' AND ')}` : '';
  const result = await db.query(
    `SELECT * FROM listings ${whereClause} ORDER BY created_at DESC LIMIT 10 OFFSET $${params.length + 1}`,
    [...params, offset]
  );

  if (!result.rows.length) {
    const btnMsg = await ctx.reply(ctx.t('listing-empty'), Markup.inlineKeyboard([
      [Markup.button.callback(ctx.t('back'), 'back_to_menu')]
    ]));
    session.shownMessages.push(btnMsg.message_id);
    return;
  }

  for (const row of result.rows) {
    let addressText = '';
    if (row.address) {
      addressText = `üìç ${escapeMarkdown(row.address)}\n`;
    } else if (row.location) {
      addressText = `üìç ${escapeMarkdown(ctx.t('location-geo'))}\n`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    let message =
      `üè° *${escapeMarkdown(row.property_type)}*, ${escapeMarkdown(row.rooms)}, ${escapeMarkdown(row.price)}\n` +
      addressText +
      `üìù ${escapeMarkdown(row.description)}`;

    const sent = await ctx.replyWithMarkdownV2(message);
    session.shownMessages.push(sent.message_id);

    // –ï—Å–ª–∏ –µ—Å—Ç—å location ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ—Ç–æ—á–∫—É
    if (row.location) {
      try {
        const loc = JSON.parse(row.location);
        if (loc.latitude && loc.longitude) {
          const geoMsg = await ctx.replyWithLocation(loc.latitude, loc.longitude);
          session.shownMessages.push(geoMsg.message_id);
        }
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }
  }

  // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
  let buttons = [];
  if (offset > 0) {
    buttons.push(Markup.button.callback(ctx.t('listing-prev'), `show_filtered_${offset - 10}`));
  }
  if (result.rows.length === 10) {
    buttons.push(Markup.button.callback(ctx.t('listing-next'), `show_filtered_${offset + 10}`));
  }
  let actionButtons = [
    Markup.button.callback(ctx.t('filter-add'), 'add_filter'),
    Markup.button.callback(ctx.t('back'), 'back_to_menu')
  ];
  const btnMsg = await ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([
    buttons,
    actionButtons
  ].filter(arr => arr.length)));
  session.shownMessages.push(btnMsg.message_id);
};

bot.action('back_to_menu', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const session = sessions.get(ctx.from.id) || {};
  if (session.shownMessages && session.shownMessages.length) {
    for (const msgId of session.shownMessages) {
      try { await ctx.deleteMessage(msgId); } catch (e) {}
    }
    session.shownMessages = [];
  }
  return showStartMenu(ctx);
});

bot.action('add', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
  sessions.set(ctx.from.id, { step: 'add_property_type', data: {} });
  await ctx.reply(ctx.t('property-choose'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('property-rent'), 'add_type_–ê—Ä–µ–Ω–¥–∞')],
    [Markup.button.callback(ctx.t('property-sale'), 'add_type_–ü—Ä–æ–¥–∞–∂–∞')]
  ]));
});

bot.action('add_type_–ê—Ä–µ–Ω–¥–∞', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
  const session = sessions.get(ctx.from.id) || { data: {} };
  session.data.property_type = '–ê—Ä–µ–Ω–¥–∞';
  session.step = 'add_currency';
  sessions.set(ctx.from.id, session);
  await ctx.reply(ctx.t('filter-currency'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('currency-usd'), 'add_currency_USD'), Markup.button.callback(ctx.t('currency-try'), 'add_currency_TRY')],
    [Markup.button.callback(ctx.t('currency-eur'), 'add_currency_EUR'), Markup.button.callback(ctx.t('currency-rub'), 'add_currency_RUB')]
  ]));
});

bot.action('add_type_–ü—Ä–æ–¥–∞–∂–∞', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
  const session = sessions.get(ctx.from.id) || { data: {} };
  session.data.property_type = '–ü—Ä–æ–¥–∞–∂–∞';
  session.step = 'add_currency';
  sessions.set(ctx.from.id, session);
  await ctx.reply(ctx.t('filter-currency'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('currency-usd'), 'add_currency_USD'), Markup.button.callback(ctx.t('currency-try'), 'add_currency_TRY')],
    [Markup.button.callback(ctx.t('currency-eur'), 'add_currency_EUR'), Markup.button.callback(ctx.t('currency-rub'), 'add_currency_RUB')]
  ]));
});

bot.action(/add_currency_(.+)/, async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const session = sessions.get(ctx.from.id) || { data: {} };
  session.data.currency = ctx.match[1];
  session.step = 'add_price';
  sessions.set(ctx.from.id, session);
  await ctx.reply(ctx.t('price-enter'));
});

bot.action(/add_rooms_(.+)/, async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  const session = sessions.get(ctx.from.id) || { data: {} };
  session.data.rooms = ctx.match[1];
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
  if (ctx.match[1] === '–î—Ä—É–≥–æ–µ') {
    session.step = 'add_rooms_text';
    sessions.set(ctx.from.id, session);
    return ctx.reply(ctx.t('rooms-text'));
  }
  session.step = 'add_location';
  sessions.set(ctx.from.id, session);
  await ctx.reply(ctx.t('location-send'));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
bot.action('change_lang', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.reply(ctx.t('choose-lang'), Markup.inlineKeyboard([
    [
      Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'set_lang_ru'),
      Markup.button.callback('üá¨üáß English', 'set_lang_en'),
      Markup.button.callback('üáπüá∑ T√ºrk√ße', 'set_lang_tr')
    ]
  ]));
});

bot.action('set_lang_ru', async (ctx) => {
  userLocales.set(ctx.from.id, 'ru');
  await ctx.i18n.renegotiateLocale();
  await ctx.answerCbQuery(ctx.t('choose-lang') + ' –†—É—Å—Å–∫–∏–π');
  try { await ctx.deleteMessage(); } catch (e) {}
  return showStartMenu(ctx);
});

bot.action('set_lang_en', async (ctx) => {
  userLocales.set(ctx.from.id, 'en');
  await ctx.i18n.renegotiateLocale();
  await ctx.answerCbQuery(ctx.t('choose-lang') + ' English');
  try { await ctx.deleteMessage(); } catch (e) {}
  return showStartMenu(ctx);
});

bot.action('set_lang_tr', async (ctx) => {
  userLocales.set(ctx.from.id, 'tr');
  await ctx.i18n.renegotiateLocale();
  await ctx.answerCbQuery(ctx.t('choose-lang') + ' T√ºrk√ße');
  try { await ctx.deleteMessage(); } catch (e) {}
  return showStartMenu(ctx);
});

bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));