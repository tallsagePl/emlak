import config from '../config.js';
import { Telegraf, Markup, Scenes, session } from 'telegraf';
import { I18n } from '@grammyjs/i18n';
import database from '../database/index.js';
import { 
  parsedListingsScene, 
  viewListingsScene, 
  // filteredListingsScene, 
  addListingScene,
  editListingScene,
  myListingsScene,
  settingsScene
} from './scenes/index.js';
import { clearOldMessages } from './utils/helpers.js';
import NotificationService from './services/notifications.js';

console.log('üîß DEBUG: NODE_ENV =', process.env.NODE_ENV);
console.log('üîß DEBUG: BOT_TOKEN =', process.env.BOT_TOKEN ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('üîß DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω =', config.telegram.token ? '***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');

if (!config.telegram.token) {
  console.warn('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.');
}

const bot = new Telegraf(config.telegram.token);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
(async () => {
  try {
    await database.init();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  }
})();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º userLocales –∏–∑ –º–æ–¥—É–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
import { userLocales } from './utils/userState.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18n
const i18n = new I18n({
  defaultLocale: 'en',
  directory: 'locales',
  useSession: true,
  locales: ['ru', 'en', 'tr'],
  localeNegotiator: (ctx) =>
    userLocales.get(ctx.from?.id) ?? ctx.from?.language_code ?? 'en',
});

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage([
  parsedListingsScene, 
  viewListingsScene, 
  // filteredListingsScene, 
  addListingScene,
  editListingScene,
  myListingsScene,
  settingsScene
]);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
bot.use(session());
bot.use(i18n.middleware());
bot.use(stage.middleware());

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  ctx.reply(ctx.t('error'));
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function showStartMenu(ctx) {
  return ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('add'), 'add')],
    [Markup.button.callback(ctx.t('view'), 'view')],
    [Markup.button.callback(ctx.t('my-listings'), 'my_listings')],
    [Markup.button.callback(ctx.t('parsed-listings'), 'view_parsed')],
    [Markup.button.callback(ctx.t('settings'), 'settings')]
  ]));
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.start((ctx) => showStartMenu(ctx));

bot.action('back_to_menu', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  if (ctx.session) {
    await clearOldMessages(ctx, ctx.session);
  }
  return showStartMenu(ctx);
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ü–µ–Ω–∞–º
bot.action('add', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.scene.enter('add_listing');
});

bot.action('view', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.scene.enter('view_listings');
});

// bot.action('view_all', async (ctx) => {
//   await ctx.answerCbQuery();
//   await ctx.scene.enter('view_listings');
// });

// bot.action('view_filtered', async (ctx) => {
//   await ctx.answerCbQuery();
//   await ctx.scene.enter('filtered_listings');
// });

bot.action('my_listings', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.scene.enter('my_listings');
});

bot.action('view_parsed', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.scene.enter('parsed_listings');
});

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
bot.action('settings', async (ctx) => {
  await ctx.answerCbQuery();
  try { await ctx.deleteMessage(); } catch (e) {}
  await ctx.scene.enter('settings');
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–º —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å—Ü–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
if (config.telegram.token) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...');
  bot.telegram.getMe().then(info => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ:', info.username);
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é polling...');
    
    return bot.launch();
  }).then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å bot.launch()
    // const notificationService = new NotificationService(bot, i18n);
    // notificationService.start();
    
    console.log('‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    bot.command('check_notifications', async (ctx) => {
      if (ctx.from.id === 123456789) { // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
        await notificationService.forceCheck();
        await ctx.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
    });
  
  // –í–∫–ª—é—á–∞–µ–º graceful shutdown
    process.once('SIGINT', () => {
      notificationService.stop();
      bot.stop('SIGINT');
    });
    process.once('SIGTERM', () => {
      notificationService.stop();
      bot.stop('SIGTERM');
    });
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
  });
} else {
  // –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
}