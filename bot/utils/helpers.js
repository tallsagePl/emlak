import { Markup } from 'telegraf';

/**
 * –ù–∞–±–æ—Ä –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
 */

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function escapeMarkdown(text) {
  if (!text) return '';
  return text.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, '\\$&');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç —Å MarkdownV2
 * @param {Object} listing - –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –¥–ª—è i18n
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
export function formatListing(listing, ctx) {
  let addressText = '';
  if (listing.address) {
    addressText = `üìç ${escapeMarkdown(listing.address)}\n`;
  } else if (listing.location) {
    addressText = `üìç ${escapeMarkdown(ctx.t('location-geo'))}\n`;
  }

  return `üè° *${escapeMarkdown(listing.property_type)}*, ${escapeMarkdown(listing.rooms)}, ${escapeMarkdown(listing.price)}\n` +
         addressText +
         `üìù ${escapeMarkdown(listing.description)}`;
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {Object} session - –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
 */
export async function clearOldMessages(ctx, session) {
  if (session.shownMessages && session.shownMessages.length) {
    for (const msgId of session.shownMessages) {
      try {
        await ctx.deleteMessage(msgId);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
    session.shownMessages = [];
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {Object} listing - –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * @param {Object} session - –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
 */
export async function sendLocation(ctx, listing, session) {
  if (listing.location) {
    try {
      const loc = JSON.parse(listing.location);
      if (loc.latitude && loc.longitude) {
        const geoMsg = await ctx.replyWithLocation(loc.latitude, loc.longitude);
        session.shownMessages.push(geoMsg.message_id);
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç SQL —É—Å–ª–æ–≤–∏–µ WHERE –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @param {Array} filters - –ú–∞—Å—Å–∏–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å WHERE —É—Å–ª–æ–≤–∏–µ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export function buildFilterWhereClause(filters) {
  let where = [];
  let params = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã –∏ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
  const currencyFilters = filters.filter(f => f.type === 'currency');
  const roomsFilters = filters.filter(f => f.type === 'rooms');
  const otherFilters = filters.filter(f => f.type !== 'currency' && f.type !== 'rooms');

  if (currencyFilters.length) {
    const currencyConds = currencyFilters.map((f) => {
      params.push(`%${f.value}%`);
      return `price ILIKE $${params.length}`;
    });
    where.push('(' + currencyConds.join(' OR ') + ')');
  }

  if (roomsFilters.length) {
    const roomsConds = roomsFilters.map((f) => {
      params.push(f.value);
      return `rooms = $${params.length}`;
    });
    where.push('(' + roomsConds.join(' OR ') + ')');
  }

  otherFilters.forEach((f) => {
    switch (f.type) {
      case 'property_type':
        params.push(f.value);
        where.push(`property_type = $${params.length}`);
        break;
      case 'price_from':
        params.push(f.value);
        where.push(`CAST(split_part(price, ' ', 1) AS NUMERIC) >= $${params.length}`);
        break;
      case 'price_to':
        params.push(f.value);
        where.push(`CAST(split_part(price, ' ', 1) AS NUMERIC) <= $${params.length}`);
        break;
    }
  });

  const whereClause = where.length ? `WHERE status = 'live' AND ${where.join(' AND ')}` : "WHERE status = 'live'";
  return { whereClause, params };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
 * @param {string} price - –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π
 * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
 */
export function isValidPrice(price) {
  return /^\d+(\.\d+)?$/.test(price.trim());
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {number} offset - –¢–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ
 * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @param {number} total - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
 * @param {string} actionPrefix - –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
 */
export function createPaginationButtons(ctx, offset, limit, total, actionPrefix) {
  let buttons = [];
  if (offset > 0) {
    buttons.push(Markup.button.callback(
      ctx.t('listing-prev'), 
      `${actionPrefix}_${offset - limit}`
    ));
  }
  if (total === limit) {
    buttons.push(Markup.button.callback(
      ctx.t('listing-next'), 
      `${actionPrefix}_${offset + limit}`
    ));
  }
  return buttons;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * @param {Object} session - –û–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
 * @returns {Object} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
 */
export function initListingSession(session = {}) {
  return {
    ...session,
    filters: session.filters || [],
    offset: session.offset || 0,
    shownMessages: session.shownMessages || [],
    step: session.step || null
  };
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞)
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @returns {Promise} Promise –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function showMainMenu(ctx) {
  return ctx.reply(ctx.t('welcome'), Markup.inlineKeyboard([
    [Markup.button.callback(ctx.t('add'), 'add')],
    [Markup.button.callback(ctx.t('view'), 'view')],
    [Markup.button.callback(ctx.t('my-listings'), 'my_listings')],
    [Markup.button.callback(ctx.t('parsed-listings'), 'view_parsed')],
    [Markup.button.callback(ctx.t('settings'), 'settings')]
  ]));
} 