/**
 * –°—Ü–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π (parsed_listings)
 * 
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–º
 * - –ò–º–ø–æ—Ä—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä—Å–µ—Ä–∞
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * 1. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∞—Ä—à–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:
 *    - –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 *    - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É
 *    - –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
 * 
 * 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏:
 *    - –ò–º–ø–æ—Ä—Ç –≤ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 *    - –ü–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
 *    - –°–∫—Ä—ã—Ç–∏–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö
 * 
 * 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:
 *    - –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 *    - –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 *    - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 * 
 * 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
 *    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 *    - –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 *    - –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
 * 
 * –°–æ–±—ã—Ç–∏—è:
 * - enter: –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É, –ø–æ–∫–∞–∑ –º–µ–Ω—é –ø–∞—Ä—Å–µ—Ä–∞
 * - action(parsed_*): –ü–∞–≥–∏–Ω–∞—Ü–∏—è
 * - action(import_*): –ò–º–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * - action(hide_*): –°–∫—Ä—ã—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * - action(settings_*): –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
 */

import { Scenes, Markup } from 'telegraf';
import database from '../../database/index.js';
import { 
  clearOldMessages,
  showMainMenu
} from '../utils/helpers.js';

const { BaseScene } = Scenes;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async function showParsedListings(ctx, source = null, offset = 0) {
  if (!ctx.session.shownMessages) ctx.session.shownMessages = [];

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  await clearOldMessages(ctx, ctx.session);

  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  let countQuery, countParams;
  if (source) {
    countQuery = 'SELECT COUNT(*) as total FROM parsed_listings WHERE site_name = $1';
    countParams = [source];
  } else {
    countQuery = 'SELECT COUNT(*) as total FROM parsed_listings';
    countParams = [];
  }
  
  const totalResult = await database.query(countQuery, countParams);
  const total = parseInt(totalResult.rows[0].total);


  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ offset –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  if (offset >= total) {
    const btnMsg = await ctx.reply(`‚ùå ${ctx.t('parsed-listings-no-more')}`, Markup.inlineKeyboard([
      [Markup.button.callback(`‚Ü©Ô∏è ${ctx.t('back-to-sources')}`, 'back_to_sources')]
    ]));
    ctx.session.shownMessages.push(btnMsg.message_id);
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  let query, params;
  if (source) {
    query = `SELECT * FROM parsed_listings WHERE site_name = $1 ORDER BY created_at DESC LIMIT 5 OFFSET $2`;
    params = [source, offset];
  } else {
    query = `SELECT * FROM parsed_listings ORDER BY created_at DESC LIMIT 5 OFFSET $1`;
    params = [offset];
  }

  const listings = await database.query(query, params);

  if (!listings.rows.length) {
    const btnMsg = await ctx.reply(`‚ùå ${ctx.t('parsed-listings-not-found')}`, Markup.inlineKeyboard([
      [Markup.button.callback(`‚Ü©Ô∏è ${ctx.t('back-to-sources')}`, 'back_to_sources')]
    ]));
    ctx.session.shownMessages.push(btnMsg.message_id);
    return;
  }

  for (const row of listings.rows) {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSONB –ø–æ–ª—è
    const data = typeof row.data === 'string' ? JSON.parse(row.data) : row.data;
    const specs = data.specifications || {};
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∞–π—Ç–∞
    let source_emoji = 'üèòÔ∏è';
    let displayName = row.site_name;
    
    switch(row.site_name) {
      case 'hepsiemlak':
        source_emoji = 'üè†';
        displayName = 'HEPSEMLAK';
        break;
      case 'emlakjet':
        source_emoji = 'üè°';
        displayName = 'EMLAKJET';
        break;
      case 'sahibinden':
        source_emoji = 'üè¢';
        displayName = 'SAHIBINDEN';
        break;
      case 'hurriyet':
        source_emoji = 'üì∞';
        displayName = 'H√úRRIYET EMLAK';
        break;
      case 'zingate':
        source_emoji = 'üîë';
        displayName = 'ZINGATE';
        break;
      default:
        source_emoji = 'üèòÔ∏è';
        displayName = row.site_name.toUpperCase();
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `${source_emoji} *${displayName}*\n\n`;

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += `üè° *${specs['–¢–∏–ø1'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}*\n`;
    message += `üìã *${specs['–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}*\n`;
    message += `üìç ${specs['–¢–∏–ø2'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
    message += `üî¢ –ù–æ–º–µ—Ä: ${specs['–ù–æ–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
    message += `üìÖ –î–∞—Ç–∞: ${specs['–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
    message += `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${specs['ƒ∞lan G√ºncelleme Tarihi'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–º–µ—â–µ–Ω–∏—è
    message += `üö™ –ö–æ–º–Ω–∞—Ç—ã: ${specs['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üìê –ù–µ—Ç—Ç–æ: ${specs['–º¬≤ (–Ω–µ—Ç—Ç–æ)'] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
    message += `üìè –ë—Ä—É—Ç—Ç–æ: ${specs['–º¬≤ (–±—Ä—É—Ç—Ç–æ)'] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
    message += `üè¢ –≠—Ç–∞–∂: ${specs['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞'] || '–ù–µ —É–∫–∞–∑–∞–Ω'} –∏–∑ ${specs['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π'] || '?'}\n`;
    message += `üèó –í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è: ${specs['–ó–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += `üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ: ${specs['Isƒ±tma –¢–∏–ø1'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üë• –°—Ç–∞—Ç—É—Å: ${specs['Kullanƒ±m Durumu'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
    message += `üí≥ –ö—Ä–µ–¥–∏—Ç: ${specs['Krediye Uygunluk'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${specs['Yatƒ±rƒ±ma Uygunluk'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üìÑ –¢–ê–ü–£: ${specs['Tapu Durumu'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üèò –í –∫–æ–º–ø–ª–µ–∫—Å–µ: ${specs['Site ƒ∞√ßerisinde'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üõã –ú–µ–±–µ–ª—å: ${specs['E≈üya Durumu'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üîÑ –ë–∞—Ä—Ç–µ—Ä: ${specs['Takas'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üöø –ö–æ–ª-–≤–æ –≤–∞–Ω–Ω—ã—Ö: ${specs['Banyo Sayƒ±s—ã'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;

    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (data.description) {
      message += `üìù ${data.description}\n\n`;
    }

    // –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ ID
    message += `‚è∞ –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${new Date(row.created_at).toLocaleDateString('ru-RU')}\n`;
    message += `üÜî ID: ${row.id}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const sent = await ctx.reply(message, { parse_mode: 'Markdown' });
    ctx.session.shownMessages.push(sent.message_id);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
    if (row.url) {
      const linkMsg = await ctx.reply('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª:', Markup.inlineKeyboard([
        [Markup.button.url('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', row.url)]
      ]));
      ctx.session.shownMessages.push(linkMsg.message_id);
    }
  }

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const currentPage = Math.floor(offset / 5) + 1;
  const totalPages = Math.ceil(total / 5);
  const hasMore = currentPage < totalPages;
  const hasPrev = currentPage > 1;
  
  const paginationButtons = [];
  if (hasPrev) {
    paginationButtons.push(
      Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', `parsed_${source || 'all'}_${offset - 5}`)
    );
  }
  if (hasMore) {
    paginationButtons.push(
      Markup.button.callback('–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', `parsed_${source || 'all'}_${offset + 5}`)
    );
  }

  const navigationButtons = [
    paginationButtons,
    [Markup.button.callback(`‚Ü©Ô∏è ${ctx.t('back-to-sources')}`, 'back_to_sources')],
    [Markup.button.callback(`üè† ${ctx.t('back')}`, 'back_to_menu')]
  ].filter(buttons => buttons.length > 0);

  const navMsg = await ctx.reply(
    ctx.t('parsed-listings-showing', {
      from: offset + 1,
      to: offset + listings.rows.length,
      total: total,
      page: currentPage,
      totalPages: totalPages
    }),
    Markup.inlineKeyboard(navigationButtons)
  );
  ctx.session.shownMessages.push(navMsg.message_id);
}

// –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async function importListing(ctx, parsedId) {
  const result = await database.query(
    'SELECT * FROM parsed_listings WHERE id = $1',
    [parsedId]
  );

  if (!result.rows.length) {
    await ctx.reply(ctx.t('error'));
    return false;
  }

  const listing = result.rows[0];
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSONB –ø–æ–ª—è
  const data = typeof listing.data === 'string' ? JSON.parse(listing.data) : listing.data;
  const specs = data.specifications || {};

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ user_listings
  await database.query(
    `INSERT INTO user_listings (
      owner_id, property_type, district, price, rooms,
      description, address, location, status, created_at
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
    [
      ctx.from.id.toString(),
      specs['–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'] || '–ù–µ —É–∫–∞–∑–∞–Ω',
      specs['–¢–∏–ø2'] || '–ù–µ —É–∫–∞–∑–∞–Ω',
      specs['–¶–µ–Ω–∞'] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
      specs['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç'] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      data.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
      specs['–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'] || null,
      null, // location coordinates –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
      'live',
      new Date()
    ]
  );

  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
async function showSourceMenu(ctx) {
  if (!ctx.session.shownMessages) ctx.session.shownMessages = [];

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  await clearOldMessages(ctx, ctx.session);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  const result = await database.query(
    `SELECT site_name, COUNT(*) as count 
     FROM parsed_listings 
     GROUP BY site_name 
     ORDER BY count DESC`
  );

  const buttons = [];
  let totalCount = 0;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  for (const row of result.rows) {
    let emoji = 'üèòÔ∏è';
    let displayName = row.site_name.toUpperCase();
    
    switch(row.site_name) {
      case 'hepsiemlak':
        emoji = 'üè†';
        displayName = 'HEPSEMLAK';
        break;
      case 'emlakjet':
        emoji = 'üè°';
        displayName = 'EMLAKJET';
        break;
      case 'sahibinden':
        emoji = 'üè¢';
        displayName = 'SAHIBINDEN';
        break;
      case 'hurriyet':
        emoji = 'üì∞';
        displayName = 'H√úRRIYET EMLAK';
        break;
      case 'zingate':
        emoji = 'üîë';
        displayName = 'ZINGATE';
        break;
    }

    buttons.push([
      Markup.button.callback(
        `${emoji} ${displayName} (${row.count})`,
        `show_source_${row.site_name}`
      )
    ]);
    totalCount += parseInt(row.count);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ" –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
  buttons.push([
    Markup.button.callback(`üìã ${ctx.t('parsed-listings-show-all')} (${totalCount})`, 'show_source_all')
  ]);
  buttons.push([
    Markup.button.callback(`üè† ${ctx.t('back')}`, 'back_to_menu')
  ]);

  const msg = await ctx.reply(
    ctx.t('parsed-listings-choose-source'),
    Markup.inlineKeyboard(buttons)
  );
  ctx.session.shownMessages.push(msg.message_id);
}

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
const parsedListingsScene = new BaseScene('parsed_listings');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
parsedListingsScene.enter(async (ctx) => {
  await showSourceMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
parsedListingsScene.action(/show_source_(.+)/, async (ctx) => {
  await ctx.answerCbQuery();
  const source = ctx.match[1];
  await showParsedListings(ctx, source === 'all' ? null : source, 0);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
parsedListingsScene.action(/parsed_(\w+)_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  const [source, offsetStr] = ctx.match.slice(1);
  const offset = parseInt(offsetStr);
  await showParsedListings(ctx, source === 'all' ? null : source, offset);
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ
parsedListingsScene.action(/view_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  const listingId = ctx.match[1];
  
  const result = await database.query(
    'SELECT url FROM parsed_listings WHERE id = $1',
    [listingId]
  );

  if (result.rows.length && result.rows[0].url) {
    await ctx.reply(ctx.t('listing-original-link') + '\n' + result.rows[0].url);
  }
});

// –ò–º–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
parsedListingsScene.action(/import_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  const listingId = ctx.match[1];
  
  const success = await importListing(ctx, listingId);
  if (success) {
    await ctx.reply(ctx.t('listing-import-success'));
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–Ω—É—Ç—å
    await showParsedListings(ctx, null, 0);
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
parsedListingsScene.action('back_to_sources', async (ctx) => {
  await ctx.answerCbQuery();
  await showSourceMenu(ctx);
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
parsedListingsScene.action('back_to_menu', async (ctx) => {
  await ctx.answerCbQuery();
  // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  await clearOldMessages(ctx, ctx.session);
  if (ctx.session.shownMessages) {
    delete ctx.session.shownMessages;
  }
  await ctx.scene.leave();
  return showMainMenu(ctx);
});

export default parsedListingsScene; 