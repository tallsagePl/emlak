/**
 * –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

import database from '../../database/index.js';
import { Markup } from 'telegraf';
import { userLocales } from '../utils/userState.js';

class NotificationService {
  constructor(bot, i18n) {
    this.bot = bot;
    this.i18n = i18n;
    this.isRunning = false;
    this.checkInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  start() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    console.log('üîî –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.intervalId = setInterval(() => {
      this.checkAndSendNotifications();
    }, this.checkInterval);
    
    // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setTimeout(() => {
      this.checkAndSendNotifications();
    }, 5000); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async checkAndSendNotifications() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      const subscribedUsers = await database.getSubscribedUsers();
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${subscribedUsers.length} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      for (const user of subscribedUsers) {
        await this.sendNotificationsToUser(user);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendNotificationsToUser(user) {
    try {
      const { user_id, last_notification_sent_at } = user;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–ª–∏ —á–∞—Å –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏)
      const lastSent = last_notification_sent_at 
        ? new Date(last_notification_sent_at)
        : new Date(Date.now() - 60 * 60 * 1000); // —á–∞—Å –Ω–∞–∑–∞–¥
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
      const newListings = await database.getNewListingsSince(lastSent);
      console.log(`üìã –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id} –Ω–∞–π–¥–µ–Ω–æ ${newListings.length} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
      
      if (newListings.length === 0) {
        return; // –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}`);
      await this.sendNotificationMessage(user_id, newListings);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      await database.updateLastNotificationSent(user_id);
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}`);
      
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getLocalizedText(userId, key, params = {}) {
    // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userLocales –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const userLocale = userLocales.get(userId) || 'ru';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º i18n –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    return this.i18n.t(userLocale, key, params);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
  async sendNotificationMessage(userId, listings) {
    try {
      const count = listings.length;
      const maxShow = 3; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      let message = `üÜï ${this.getLocalizedText(userId, 'notifications-new-listings')}\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      const listingsToShow = listings.slice(0, maxShow);
      
      for (const listing of listingsToShow) {
        const data = typeof listing.data === 'string' 
          ? JSON.parse(listing.data) 
          : listing.data;
        
        const specs = data.specifications || {};
        
        message += `üè† ${specs['–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'] || this.getLocalizedText(userId, 'common-not-specified')}\n`;
        message += `üí∞ ${specs['–¶–µ–Ω–∞'] || this.getLocalizedText(userId, 'common-price-not-specified')}\n`;
        message += `üìç ${specs['–ü—Ä–æ–≤–∏–Ω—Ü–∏—è'] || this.getLocalizedText(userId, 'common-location-not-specified')}\n`;
        message += `üîó ${listing.url}\n\n`;
      }
      
      if (count > maxShow) {
        message += `... ${this.getLocalizedText(userId, 'notifications-and-more', { count: count - maxShow })}\n\n`;
      }
      
      message += `${this.getLocalizedText(userId, 'notifications-total-new', { count })}`;
      
      await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üìã ' + this.getLocalizedText(userId, 'notifications-view-all'), 'view_parsed')],
          [Markup.button.callback('‚öôÔ∏è ' + this.getLocalizedText(userId, 'notifications-settings'), 'settings')]
        ]).reply_markup
      });
      
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async forceCheck() {
    await this.checkAndSendNotifications();
  }
}

export default NotificationService; 